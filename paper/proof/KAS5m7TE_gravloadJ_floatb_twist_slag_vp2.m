% Calculate Gravitation load on the joints for
% KAS5m7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [24x1]
%   kinematic parameters (e.g. lengths of the links)
% m_num_mdh [16x1]
%   mass of all robot links (including the base)
% mrSges_num_mdh [16x3]
%  first moment of all robot links (mass times center of mass in body frames)
%  rows: links of the robot (starting with base)
%  columns: x-, y-, z-coordinates
% 
% Output:
% taug [5x1]
%   joint torques required to compensate gravitation load

% Quelle: IRT-Maple-Repo
% Datum: 2018-03-02 09:04
% Revision: ebe880247fd75d60c1f68e80d9027470bafed2b3
% (C) Institut für Regelungstechnik, Universität Hannover

function taug = KAS5m7_gravloadJ_floatb_twist_slag_vp2(qJ, g, ...
  pkin, m_num, mrSges_num_mdh)
%% Coder Information
%#codegen
assert(isa(qJ,'double') && isreal(qJ) && all(size(qJ) == [5 1]), ...
  'KAS5m7_gravloadJ_floatb_twist_slag_vp2: qJ has to be [5x1] double');
assert(isa(g,'double') && isreal(g) && all(size(g) == [3 1]), ...
  'KAS5m7_gravloadJ_floatb_twist_slag_vp2: g has to be [3x1] double');
assert(isa(pkin,'double') && isreal(pkin) && all(size(pkin) == [24 1]), ...
  'KAS5m7_gravloadJ_floatb_twist_slag_vp2: pkin has to be [24x1] double');
assert(isa(m_num,'double') && isreal(m_num) && all(size(m_num) == [16 1]), ...
  'KAS5m7_gravloadJ_floatb_twist_slag_vp2: m_num has to be [16x1] double'); 
assert(isa(mrSges_num_mdh,'double') && isreal(mrSges_num_mdh) && all(size(mrSges_num_mdh) == [16,3]), ...
  'KAS5m7_gravloadJ_floatb_twist_slag_vp2: mrSges_num_mdh has to be [16x3] double');

%% Variable Initialization
qJ1s = qJ(1);
qJ2s = qJ(2);
qJ3s = qJ(3);
qJ4s = qJ(4);
qJ5s = qJ(5);

g1 = g(1);
g2 = g(2);
g3 = g(3);

delta10 = pkin(1);
delta12 = pkin(2);
delta17 = pkin(3);
delta18 = pkin(4);
delta20 = pkin(5);
delta8 = pkin(6);
delta9 = pkin(7);
l1 = pkin(8);
l11 = pkin(9);
l12 = pkin(10);
l13 = pkin(11);
l14 = pkin(12);
l15 = pkin(13);
l17 = pkin(14);
l18 = pkin(15);
l2 = pkin(16);
l20 = pkin(17);
l21 = pkin(18);
l22 = pkin(19);
l23 = pkin(20);
l3 = pkin(21);
l4 = pkin(22);
l5 = pkin(23);
l6 = pkin(24);

M0 = m_num(1);
M1 = m_num(2);
M2 = m_num(3);
M3 = m_num(4);
M4 = m_num(5);
M5 = m_num(6);
M6 = m_num(7);
M7 = m_num(8);
M8 = m_num(9);
M9 = m_num(10);
M10 = m_num(11);
M11 = m_num(12);
M12 = m_num(13);
M13 = m_num(14);
M14 = m_num(15);
M15 = m_num(16);

MX0 = mrSges_num_mdh(1,1);
MY0 = mrSges_num_mdh(1,2);
MZ0 = mrSges_num_mdh(1,3);
MX1 = mrSges_num_mdh(2,1);
MY1 = mrSges_num_mdh(2,2);
MZ1 = mrSges_num_mdh(2,3);
MX2 = mrSges_num_mdh(3,1);
MY2 = mrSges_num_mdh(3,2);
MZ2 = mrSges_num_mdh(3,3);
MX3 = mrSges_num_mdh(4,1);
MY3 = mrSges_num_mdh(4,2);
MZ3 = mrSges_num_mdh(4,3);
MX4 = mrSges_num_mdh(5,1);
MY4 = mrSges_num_mdh(5,2);
MZ4 = mrSges_num_mdh(5,3);
MX5 = mrSges_num_mdh(6,1);
MY5 = mrSges_num_mdh(6,2);
MZ5 = mrSges_num_mdh(6,3);
MX6 = mrSges_num_mdh(7,1);
MY6 = mrSges_num_mdh(7,2);
MZ6 = mrSges_num_mdh(7,3);
MX7 = mrSges_num_mdh(8,1);
MY7 = mrSges_num_mdh(8,2);
MZ7 = mrSges_num_mdh(8,3);
MX8 = mrSges_num_mdh(9,1);
MY8 = mrSges_num_mdh(9,2);
MZ8 = mrSges_num_mdh(9,3);
MX9 = mrSges_num_mdh(10,1);
MY9 = mrSges_num_mdh(10,2);
MZ9 = mrSges_num_mdh(10,3);
MX10 = mrSges_num_mdh(11,1);
MY10 = mrSges_num_mdh(11,2);
MZ10 = mrSges_num_mdh(11,3);
MX11 = mrSges_num_mdh(12,1);
MY11 = mrSges_num_mdh(12,2);
MZ11 = mrSges_num_mdh(12,3);
MX12 = mrSges_num_mdh(13,1);
MY12 = mrSges_num_mdh(13,2);
MZ12 = mrSges_num_mdh(13,3);
MX13 = mrSges_num_mdh(14,1);
MY13 = mrSges_num_mdh(14,2);
MZ13 = mrSges_num_mdh(14,3);
MX14 = mrSges_num_mdh(15,1);
MY14 = mrSges_num_mdh(15,2);
MZ14 = mrSges_num_mdh(15,3);
MX15 = mrSges_num_mdh(16,1);
MY15 = mrSges_num_mdh(16,2);
MZ15 = mrSges_num_mdh(16,3);

%% Symbolic Calculation
% From joint_gravload_floatb_twist_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2018-03-01 16:09:43
% EndTime: 2018-03-01 18:22:24
% DurationCPUTime: 4934.58s
% Computational Cost: add. (172150051->710), mult. (224612215->985), div. (2875262->12), fcn. (89870791->28), ass. (0->365)
t341 = delta17 + qJ3s;
t338 = cos(t341);
t496 = t338 * l14;
t327 = 0.2e1 * t496;
t356 = cos(qJ3s);
t359 = -l5 + l6;
t472 = t356 * t359;
t318 = -(2 * l11) + t327 + 0.2e1 * t472;
t351 = sin(qJ3s);
t336 = t351 * t359;
t331 = -0.2e1 * t336;
t337 = sin(t341);
t497 = t337 * l14;
t319 = t331 + 0.2e1 * t497;
t326 = -l11 + t472;
t344 = t359 ^ 2;
t364 = l13 ^ 2;
t302 = t344 * t351 ^ 2 - l22 ^ 2 + t326 ^ 2 + t364 + (t318 * t338 + t319 * t337 + (-t337 ^ 2 - t338 ^ 2) * l14) * l14;
t309 = t318 ^ 2 + t319 ^ 2;
t367 = sqrt(-t302 ^ 2 + t309 * t364);
t284 = t302 * t318 - t319 * t367;
t307 = 0.1e1 / t309;
t390 = t326 + t496;
t280 = t284 * t307 - t390;
t283 = t302 * t319 + t318 * t367;
t431 = t336 - t497;
t281 = t283 * t307 + t431;
t277 = t280 * t351 + t281 * t356;
t279 = t356 * t280;
t278 = -t281 * t351 + t279;
t360 = 0.1e1 / l22;
t499 = l21 * t360;
t446 = cos(delta9) * t499;
t447 = sin(delta9) * t499;
t267 = -t277 * t447 + t278 * t446;
t386 = -l6 - t267;
t264 = 0.2e1 * t386;
t265 = t277 * t446 + t278 * t447;
t266 = 0.2e1 * t265;
t361 = l20 ^ 2;
t245 = -l4 ^ 2 + l6 ^ 2 + t361 + (-t264 - t267) * t267 + (t266 - t265) * t265;
t262 = t264 ^ 2 + t266 ^ 2;
t366 = sqrt(-t245 ^ 2 + t262 * t361);
t238 = t245 * t264 + t266 * t366;
t260 = 0.1e1 / t262;
t235 = -t238 * t260 + t386;
t237 = -t245 * t266 + t264 * t366;
t236 = -t237 * t260 - t265;
t346 = sin(delta8);
t348 = cos(delta8);
t365 = 0.1e1 / l4;
t230 = (-t235 * t346 + t236 * t348) * t365;
t231 = (t235 * t348 + t236 * t346) * t365;
t353 = sin(qJ1s);
t352 = sin(qJ2s);
t358 = cos(qJ1s);
t476 = t352 * t358;
t221 = t230 * t353 - t231 * t476;
t209 = t221 * t356;
t220 = t230 * t476 + t231 * t353;
t182 = -t220 * t351 + t209;
t183 = t220 * t356 + t221 * t351;
t139 = t182 * t351 + t183 * t356;
t141 = t182 * t356 - t183 * t351;
t342 = sin(delta17);
t343 = cos(delta17);
t101 = t139 * t342 - t141 * t343;
t102 = t139 * t343 + t141 * t342;
t432 = -qJ4s + t341;
t418 = sin(t432);
t389 = t418 * l14;
t339 = qJ4s - qJ3s + delta18;
t332 = sin(t339);
t333 = cos(t339);
t429 = t333 * l17 - t332 * l18;
t313 = -t389 + t429;
t412 = l17 * t332 + l18 * t333;
t334 = cos(t432);
t500 = l14 * t334;
t310 = -l12 - t412 - t500;
t306 = t310 ^ 2 + t313 ^ 2;
t368 = sqrt(t306);
t305 = 0.1e1 / t368;
t388 = t305 * t418;
t298 = t313 * t388;
t480 = t310 * t334;
t289 = t305 * t480 + t298;
t479 = t313 * t334;
t290 = -t305 * t479 + t310 * t388;
t57 = t101 * t290 + t102 * t289;
t350 = sin(qJ4s);
t355 = cos(qJ4s);
t136 = t182 * t355 - t183 * t350;
t129 = t136 * t333;
t138 = t182 * t350 + t183 * t355;
t427 = t138 * t332 - t129;
t311 = t412 - t500;
t312 = t389 + t429;
t515 = t305 / t306;
t456 = -t515 / 0.2e1;
t381 = t418 * t456;
t539 = 0.2e1 * t310 * t312 + 0.2e1 * t311 * t313;
t271 = t305 * (t312 * t418 + t334 * (t310 - t311)) + (t515 * t479 / 0.2e1 + t310 * t381) * t539 + t298;
t272 = t312 * t305 * t334 + t311 * t388 + (t313 * t381 + t456 * t480) * t539 - t290;
t478 = t352 * t353;
t219 = t230 * t358 + t231 * t478;
t208 = t219 * t356;
t218 = -t230 * t478 + t231 * t358;
t180 = -t218 * t351 + t208;
t181 = t218 * t356 + t219 * t351;
t133 = -t180 * t356 + t181 * t351;
t135 = t180 * t351 + t181 * t356;
t98 = t133 * t342 - t135 * t343;
t99 = t133 * t343 + t135 * t342;
t560 = -t271 * t99 + t272 * t98;
t559 = -t271 * t98 - t272 * t99;
t558 = -t101 * t271 - t102 * t272;
t557 = -t101 * t272 + t102 * t271;
t357 = cos(qJ2s);
t485 = t230 * t357;
t227 = t351 * t485;
t484 = t231 * t356;
t212 = t357 * t484 + t227;
t400 = t230 * t356 - t231 * t351;
t213 = t400 * t357;
t171 = -t212 * t356 - t213 * t351;
t173 = t212 * t351 - t213 * t356;
t126 = t171 * t342 - t173 * t343;
t127 = t171 * t343 + t173 * t342;
t556 = t126 * t272 - t127 * t271;
t555 = -t126 * t271 - t127 * t272;
t538 = -M6 - M7;
t514 = -M8 - M3;
t554 = l12 * t538 - MX5;
t553 = -MZ3 - MZ8 - MZ9;
t223 = t230 * t346 - t231 * t348;
t189 = -l4 * t223 - t386;
t222 = t230 * t348 + t231 * t346;
t190 = l4 * t222 + t265;
t362 = 0.1e1 / l20;
t108 = (t189 * t222 + t190 * t223) * t362;
t109 = (-t189 * t223 + t190 * t222) * t362;
t525 = -MX3 * t230 + MY3 * t231 + (-MX9 * t108 + MY9 * t109 + MY8) * t348 + (-M9 * l4 + MX9 * t109 + MY9 * t108 + MX8) * t346;
t552 = -MY2 * t352 + (MX2 - t525) * t357;
t349 = sin(qJ5s);
t354 = cos(qJ5s);
t519 = -MX7 * t354 + MY7 * t349 - MX6;
t549 = 0.2e1 * t519;
t551 = -t333 * t549 + MY5;
t550 = -t332 * t549 + t554;
t521 = (M7 * l15 - MY6 + MZ7);
t548 = 2 * t521;
t535 = -M15 - M14;
t546 = -M4 + t535 + t538;
t545 = l3 * t514 + t553;
t438 = -t539 * t305 / 0.2e1;
t320 = t331 - 0.2e1 * t497;
t321 = t327 - 0.2e1 * t472;
t294 = 0.2e1 * (-t326 * t359 + t344 * t356) * t351 + ((t319 + t320) * t338 + (-t318 + t321) * t337) * l14;
t410 = t472 - t496;
t303 = 0.2e1 * t318 * t320 + 0.2e1 * t319 * t321;
t481 = t303 / t309 ^ 2;
t482 = (-0.2e1 * t294 * t302 + t303 * t364) / t367;
t269 = (t294 * t319 + t302 * t321 + t320 * t367 + t318 * t482 / 0.2e1) * t307 - t283 * t481 + t410;
t430 = t336 + t497;
t459 = (t320 * t302 + t318 * t294 - t321 * t367 - t319 * t482 / 0.2e1) * t307 - t284 * t481 + t430 - t281;
t257 = t459 * t356 + (-t269 - t280) * t351;
t258 = t269 * t356 + t351 * t459 + t279;
t393 = -t257 * t446 + t258 * t447;
t249 = 0.2e1 * t393;
t462 = t257 * t447 + t258 * t446;
t251 = 0.2e1 * t462;
t232 = -t249 * t267 + t251 * t265 + (-0.2e1 * t265 + t266) * t462 - (-t264 - 0.2e1 * t267) * t393;
t239 = 0.2e1 * t249 * t264 + 0.2e1 * t251 * t266;
t537 = (-0.2e1 * t232 * t245 + t239 * t361) / t366 / 0.2e1;
t536 = -M10 - M11;
t534 = M15 * t438;
t533 = MX7 * t349;
t532 = MY7 * t354;
t531 = (t220 * t277 - t221 * t278) * t360;
t530 = (t220 * t278 + t221 * t277) * t360;
t469 = -MX14 - MX15;
t454 = -M5 - M13 - M12;
t526 = -MZ12 - MZ13 - MZ5;
t524 = M9 * l3 - t545;
t419 = M15 * t368 - MY14 + MZ15;
t520 = MY15 + MZ10 + MZ11 + MZ14 + MZ4 + MZ6;
t518 = -t520 + t526;
t517 = t518 - t533;
t516 = 0.1e1 / l13;
t483 = t239 / t262 ^ 2;
t146 = -(t264 * t232 + t249 * t245 + t251 * t366 + t266 * t537) * t260 + t238 * t483 + t393;
t147 = -(-t232 * t266 - t245 * t251 + t249 * t366 + t264 * t537) * t260 + t237 * t483 - t462;
t106 = (-t146 * t346 + t147 * t348) * t365;
t107 = (t146 * t348 + t147 * t346) * t365;
t74 = -t106 * t478 + t107 * t358;
t513 = l6 * t74;
t76 = t106 * t476 + t107 * t353;
t512 = l6 * t76;
t72 = t74 * l5;
t73 = t76 * l5;
t507 = l3 * t352;
t506 = l3 * t357;
t505 = MY1 + MZ2;
t75 = t106 * t358 + t107 * t478;
t491 = -t218 + t75;
t48 = t351 * t491 + t356 * t74 + t208;
t34 = t48 * l11 + t72;
t77 = t106 * t353 - t107 * t476;
t490 = -t220 + t77;
t50 = t351 * t490 + t356 * t76 + t209;
t35 = t50 * l11 + t73;
t504 = MX2 * t352;
t398 = -t277 * t356 + t278 * t351;
t383 = t398 * t360;
t263 = l22 * t383 + t431;
t498 = t263 * t516;
t495 = t360 * t516;
t134 = t180 * t350 + t181 * t355;
t47 = t491 * t356 + (-t219 - t74) * t351;
t30 = -t350 * t48 + t355 * t47;
t494 = t134 + t30;
t49 = t490 * t356 + (-t221 - t76) * t351;
t32 = -t350 * t50 + t355 * t49;
t493 = t138 + t32;
t172 = t212 * t350 - t213 * t355;
t468 = t106 - t231;
t68 = ((t107 + t230) * t356 + t468 * t351) * t357;
t69 = t227 + (t107 * t351 - t356 * t468) * t357;
t43 = -t350 * t69 + t355 * t68;
t492 = t172 + t43;
t489 = t106 * t357;
t486 = t230 * t352;
t477 = t352 * t354;
t475 = t353 * t348;
t474 = t353 * t357;
t473 = t354 * t357;
t471 = t357 * t358;
t470 = t357 * t360;
t330 = l3 * t471;
t466 = -t220 * l6 + t330;
t217 = t220 * l5;
t465 = -t217 + t330;
t328 = l3 * t476;
t442 = t230 * t471;
t464 = l6 * t442 + t328;
t463 = l5 * t442 + t328;
t461 = t257 + t277;
t460 = t258 - t278;
t457 = t358 * l2 + l3 * t474;
t22 = t351 * t48 - t356 * t47 + t135;
t23 = (t180 + t48) * t356 + (-t181 + t47) * t351;
t13 = t22 * t342 - t23 * t343;
t453 = t13 * l14 + t34;
t24 = t351 * t50 - t356 * t49 + t139;
t25 = (t182 + t50) * t356 + (-t183 + t49) * t351;
t15 = t24 * t342 - t25 * t343;
t452 = t15 * l14 + t35;
t449 = l6 * t489;
t448 = l5 * t489;
t179 = t183 * l11;
t441 = -t179 + t465;
t204 = t400 * t471;
t187 = t204 * l11 + t463;
t440 = t218 * l6 + t457;
t439 = t218 * l5 + t457;
t436 = -MX1 + t504;
t435 = -l2 * t353 + t330;
t434 = l6 * t486 - t506;
t433 = l5 * t486 - t506;
t132 = t180 * t355 - t181 * t350;
t128 = t132 * t333;
t428 = t134 * t332 - t128;
t170 = t212 * t355 + t213 * t350;
t164 = t170 * t333;
t426 = t172 * t332 - t164;
t420 = t181 * l11 + t439;
t60 = t69 * l11 - t448;
t211 = t400 * t352;
t188 = t211 * l11 + t433;
t36 = t351 * t69 - t356 * t68 + t173;
t37 = (t212 + t69) * t356 + (t213 + t68) * t351;
t20 = t342 * t36 - t343 * t37;
t409 = t20 * l14 + t60;
t405 = t132 * t332 + t134 * t333;
t402 = t230 * t278 - t231 * t277;
t401 = t230 * t277 + t231 * t278;
t399 = t230 * t351 + t484;
t397 = t277 * t351 + t278 * t356;
t385 = t402 * t360;
t384 = t401 * t360;
t382 = t397 * t360;
t380 = t516 * t382;
t198 = t402 * t470;
t197 = t401 * t470;
t247 = (t351 * t460 + t356 * t461) * t360;
t379 = (l22 * t247 - t430) * t495;
t378 = t351 * t461 - t356 * t460;
t377 = t360 * t378;
t376 = MY2 + t518 + t553;
t372 = t516 * (l22 * t382 + t390);
t371 = t360 * t372;
t324 = t349 * t471;
t317 = t346 * t353 + t348 * t476;
t316 = t346 * t476 - t475;
t315 = -t346 * t358 + t352 * t475;
t314 = t346 * t478 + t348 * t358;
t253 = t263 * t380 - t371 * t398;
t252 = (-t398 * t498 + (-l22 * t495 * t397 - t390 * t516) * t397) * t360;
t246 = l22 * t377 + t410;
t234 = t246 * t380 + t247 * t498 - t371 * t378 - t379 * t398;
t233 = -t246 * t383 * t516 - t247 * t372 - t377 * t498 - t397 * t379;
t210 = t399 * t352;
t203 = t399 * t471;
t202 = t353 * t213;
t201 = t399 * t474;
t199 = t202 * l11;
t196 = t352 * t385;
t195 = t352 * t384;
t194 = t385 * t471;
t193 = t384 * t471;
t169 = -t210 * t351 + t211 * t356;
t168 = -t210 * t350 + t211 * t355;
t167 = t210 * t356 + t211 * t351;
t166 = -t210 * t355 - t211 * t350;
t163 = -t203 * t351 + t204 * t356;
t162 = -t203 * t350 + t204 * t355;
t161 = t203 * t356 + t204 * t351;
t160 = -t203 * t355 - t204 * t350;
t159 = t201 * t351 - t202 * t356;
t158 = t201 * t350 - t202 * t355;
t157 = -t201 * t356 - t202 * t351;
t156 = t201 * t355 + t202 * t350;
t154 = t158 * l12;
t149 = (t218 * t278 + t219 * t277) * t360;
t148 = (-t218 * t277 + t219 * t278) * t360;
t125 = t167 * t343 + t169 * t342;
t124 = t167 * t342 - t169 * t343;
t119 = t161 * t343 + t163 * t342;
t118 = t161 * t342 - t163 * t343;
t117 = t157 * t343 + t159 * t342;
t116 = t157 * t342 - t159 * t343;
t90 = t349 * t474 - t354 * t428;
t89 = t349 * t428 + t353 * t473;
t88 = -t126 * t289 + t127 * t290;
t79 = t106 * t346 - t107 * t348;
t78 = t106 * t348 + t107 * t346;
t71 = -l4 * t79 - t393;
t70 = l4 * t78 + t462;
t66 = (-t106 * t278 + t107 * t277 - t230 * t257 + t231 * t258) * t470;
t65 = (t106 * t277 + t107 * t278 + t230 * t258 + t231 * t257) * t470;
t55 = -t289 * t98 + t290 * t99;
t44 = t350 * t68 + t355 * t69;
t41 = (t220 * t257 + t221 * t258 + t277 * t77 + t278 * t76) * t360;
t40 = (-t220 * t258 + t221 * t257 - t277 * t76 + t278 * t77) * t360;
t39 = (t218 * t257 + t219 * t258 + t277 * t75 + t278 * t74) * t360;
t38 = (-t218 * t258 + t219 * t257 - t277 * t74 + t278 * t75) * t360;
t33 = t350 * t49 + t355 * t50;
t31 = t350 * t47 + t355 * t48;
t27 = (-t189 * t79 + t190 * t78 + t222 * t70 - t223 * t71) * t362;
t26 = (t189 * t78 + t190 * t79 + t222 * t71 + t223 * t70) * t362;
t21 = t342 * t37 + t343 * t36;
t16 = t24 * t343 + t25 * t342;
t14 = t22 * t343 + t23 * t342;
t1 = [(t428 * MX6 - t521 * t405 + t535 * (t98 * l14 + t420) + t538 * (t134 * l12 + t420) - t180 * MY4 - MX8 * t314 - MY8 * t315 - MX3 * t218 - MY3 * t219 - MX5 * t134 - MY5 * t132 - MX13 * t98 - MY13 * t99 + (t357 * t376 + t436) * t353 - t148 * MY10 - M4 * t439 - M11 * (l22 * t149 + t440) - M10 * t440 + (-M2 * l2 - t505) * t358 + t454 * t420 - (-t108 * t315 + t109 * t314) * MX9 - (t108 * t314 + t109 * t315) * MY9 - M9 * (-l4 * t314 + t457) + t514 * t457 + t469 * (t289 * t99 + t290 * t98) - MX12 * t133 - MY12 * t135 - (t148 * t252 - t149 * t253) * MY11 - (t148 * t253 + t149 * t252) * MX11 - t90 * MX7 - t181 * MX4 - t89 * MY7 + t419 * t55 - t149 * MX10) * g2 + (-t531 * MY10 - (t252 * t531 + t253 * t530) * MY11 - (-t252 * t530 + t253 * t531) * MX11 - M11 * (-l22 * t530 + t466) + t530 * MX10 + t183 * MX4 + t454 * (-t179 - t217 + t435) + t182 * MY4 + ((t376 - t532) * t357 + t436) * t358 + t535 * (t102 * l14 + t441) + MY12 * t139 + t469 * (-t101 * t289 + t102 * t290) + MY13 * t101 - M4 * t465 - M10 * t466 + MY5 * t136 - t521 * (-t136 * t332 - t138 * t333) + MX5 * t138 + t538 * (-l12 * t138 + t441) - (-t108 * t317 + t109 * t316) * MX9 - (t108 * t316 + t109 * t317) * MY9 - t419 * t57 - MX8 * t316 - MY8 * t317 + MX3 * t220 + MY3 * t221 - MX13 * t102 + t514 * t435 - MX12 * t141 - t324 * MX7 - M9 * (-l4 * t316 + t330) + t519 * t427 + ((M2 + M9 - t536 - t546) * l2 + t505) * t353) * g1 (t469 * (t124 * t290 + t125 * t289) - (-t195 * t252 - t196 * t253) * MY11 - (-t195 * t253 + t196 * t252) * MX11 + t535 * (t124 * l14 + t188) + t538 * (t168 * l12 + t188) - M4 * t433 - t211 * MX4 - MX12 * t167 - MY12 * t169 + (-MY2 - t517 + t524) * t357 + t525 * t352 - M11 * (l22 * t196 + t434) - M10 * t434 + t473 * MY7 + t419 * (-t124 * t289 + t125 * t290) - t521 * (t166 * t332 + t168 * t333) + t519 * (t166 * t333 - t168 * t332) + t210 * MY4 - MX5 * t168 - MY5 * t166 - MX13 * t124 - MY13 * t125 - t196 * MX10 + t195 * MY10 - t504 + t454 * t188) * g3 + ((t352 * t545 - t552) * t358 + t469 * (t118 * t290 + t119 * t289) - (-t193 * t252 - t194 * t253) * MY11 - (-t193 * t253 + t194 * t252) * MX11 + (t517 - t532) * t476 + t535 * (t118 * l14 + t187) + t538 * (t162 * l12 + t187) - M11 * (l22 * t194 + t464) - M9 * t328 - MX12 * t161 - MY12 * t163 - M4 * t463 + t419 * (-t118 * t289 + t119 * t290) - t521 * (t160 * t332 + t162 * t333) + t519 * (t160 * t333 - t162 * t332) - t194 * MX10 - M10 * t464 - MX13 * t118 - MY13 * t119 - MX5 * t162 - MY5 * t160 - t204 * MX4 + t193 * MY10 + t203 * MY4 + t454 * t187) * g2 + (-M7 * t154 - M6 * (t154 - t199) - MX13 * t116 - MY13 * t117 - MX12 * t157 - MY12 * t159 + t202 * MX4 - t201 * MY4 - MX5 * t158 - MY5 * t156 + t469 * (t116 * t290 + t117 * t289) + t535 * (t116 * l14 - t199) + t419 * (-t116 * t289 + t117 * t290) - t521 * (t156 * t332 + t158 * t333) + t519 * (t156 * t333 - t158 * t332) + (-t526 + t533) * t478 - (-M7 + t454) * t199 + ((-t253 * MX11 - t252 * MY11 - MY10) * t197 - (-M11 * l22 - t252 * MX11 + t253 * MY11 - MX10) * t198 + t477 * MY7 + t536 * (-l6 * t485 - t507) + (t454 + t546) * (-l5 * t485 - t507) + (t524 + t520) * t352 + t552) * t353) * g1 (-(-t233 * t531 - t234 * t530 + t252 * t40 - t253 * t41) * MY11 - (t233 * t530 - t234 * t531 + t252 * t41 + t253 * t40) * MX11 + t519 * (t493 * t333 + (t136 - t33) * t332) + t538 * (t33 * l12 + t35) - M4 * t73 - M10 * t512 - M14 * t452 + t469 * (t15 * t290 + t16 * t289 - t557) + t419 * (-t15 * t289 + t16 * t290 - t558) - M15 * (t438 * t57 + t452) - (t26 * t317 - t27 * t316) * MX9 - (-t26 * t316 - t27 * t317) * MY9 - t521 * (t33 * t333 + t332 * t493 - t129) - M11 * (l22 * t41 + t512) - MX3 * t76 - MY3 * t77 - MY10 * t40 - MX10 * t41 + t454 * t35 - MX4 * t50 - MY4 * t49 - MX13 * t15 - MY13 * t16 - MX5 * t33 - MY5 * t32 - MX12 * t24 - MY12 * t25) * g2 + (t519 * (t494 * t333 + (t132 - t31) * t332) + t538 * (t31 * l12 + t34) - M10 * t513 - M4 * t72 - M14 * t453 - t521 * (t31 * t333 + t332 * t494 - t128) - (-t26 * t315 + t27 * t314) * MX9 - (t26 * t314 + t27 * t315) * MY9 - MX4 * t48 - MY4 * t47 - MX10 * t39 - MY10 * t38 - MX3 * t74 - MY3 * t75 - M15 * (t438 * t55 + t453) + t469 * (t13 * t290 + t14 * t289 - t559) + t419 * (-t13 * t289 + t14 * t290 - t560) - M11 * (l22 * t39 + t513) - (t148 * t233 - t149 * t234 + t252 * t38 - t253 * t39) * MY11 - (t148 * t234 + t149 * t233 + t252 * t39 + t253 * t38) * MX11 + t454 * t34 - MX12 * t22 - MY12 * t23 - MX5 * t31 - MY5 * t30 - MX13 * t13 - MY13 * t14) * g1 + ((-(-t26 * t348 + t27 * t346) * MX9 - (t26 * t346 + t27 * t348) * MY9 + MX3 * t106 - MY3 * t107) * t357 - M14 * t409 + M4 * t448 + M10 * t449 - MX12 * t36 - MY12 * t37 - M11 * (l22 * t66 - t449) - MY10 * t65 - MX13 * t20 - MY13 * t21 - MX5 * t44 - MY5 * t43 - M15 * (t438 * t88 + t409) - (t197 * t233 + t198 * t234 + t252 * t65 - t253 * t66) * MY11 - (t197 * t234 - t198 * t233 + t252 * t66 + t253 * t65) * MX11 - MX4 * t69 - MY4 * t68 - MX10 * t66 + t469 * (t20 * t290 + t21 * t289 - t555) + t419 * (-t20 * t289 + t21 * t290 - t556) + t538 * (t44 * l12 + t60) - t521 * (t332 * t492 + t333 * t44 - t164) + t519 * (t492 * t333 + (t170 - t44) * t332) + t454 * t60) * g3 (t550 * t170 + t551 * t172 + t419 * t556 + t426 * t548 + t469 * t555 + t88 * t534) * g3 + (t550 * t136 + t551 * t138 + t419 * t558 + t427 * t548 + t469 * t557 + t57 * t534) * g2 + (MY5 * t134 + t554 * t132 - 0.2e1 * t519 * t405 + t419 * t560 + t428 * t548 + t469 * t559 + t55 * t534) * g1 -g2 * ((t349 * t427 - t354 * t471) * MX7 + (t354 * t427 + t324) * MY7) - g3 * ((t349 * t426 - t477) * MX7 + (t349 * t352 + t354 * t426) * MY7) - g1 * (MX7 * t89 - MY7 * t90)];
taug  = t1 (:);
