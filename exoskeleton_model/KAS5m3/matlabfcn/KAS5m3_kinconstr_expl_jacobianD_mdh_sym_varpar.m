% Jacobian time derivative of explicit kinematic constraints of
% KAS5m3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [30x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a10,a11,a12,a4,a5,a6,a9,d1,d2,d3,d7,d8,delta8s,delta9s,l11,l12,l13,l14,l17,l18,l20,l21,l22,l4,l5,l6,delta10s,delta12s,delta17s,delta18s]';
% 
% Output:
% WD [13x6]
%
% Sources:
% [NakamuraGho1989] Nakamura, Yoshihiko and Ghodoussi, Modjtaba: Dynamics computation of closed-link robot mechanisms with nonredundant and redundant actuators (1989)
% [ParkChoPlo1999] Park, FC and Choi, Jihyeon and Ploen, SR: Symbolic formulation of closed chain dynamics in independent coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-27 17:47
% Revision: bc59515823ab4a8d0fec19bf3bf92c32c39a66b0 (2020-06-27)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function WD = KAS5m3_kinconstr_expl_jacobianD_mdh_sym_varpar(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'KAS5m3_kinconstr_expl_jacobianD_mdh_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'KAS5m3_kinconstr_expl_jacobianD_mdh_sym_varpar: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [30 1]), ...
  'KAS5m3_kinconstr_expl_jacobianD_mdh_sym_varpar: pkin has to be [30x1] (double)');

%% Symbolic Calculation
% From kinconstr_expl_jacobianD_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-27 16:27:26
% EndTime: 2020-06-27 16:33:09
% DurationCPUTime: 335.94s
% Computational Cost: add. (9531738->317), mult. (12902024->586), div. (124352->34), fcn. (5021847->16), ass. (0->273)
t567 = cos(qJ(3));
t571 = pkin(25) - pkin(26);
t507 = t567 * t571;
t496 = -pkin(15) - t507;
t486 = 0.2e1 * t496;
t526 = pkin(29) + qJ(3);
t509 = sin(t526);
t505 = -0.2e1 * t509;
t491 = t571 * t505;
t510 = cos(t526);
t559 = t571 ^ 2;
t566 = sin(qJ(3));
t574 = pkin(17) ^ 2;
t451 = t574 - pkin(23) ^ 2 + t496 ^ 2 + t566 ^ 2 * t559 + (t510 * t486 - t566 * t491 + (t509 ^ 2 + t510 ^ 2) * pkin(18)) * pkin(18);
t502 = t510 * pkin(18);
t484 = t507 - t502;
t477 = pkin(15) + t484;
t501 = t509 * pkin(18);
t506 = t566 * t571;
t481 = -t506 - t501;
t457 = 0.4e1 * t477 ^ 2 + 0.4e1 * t481 ^ 2;
t437 = -t451 ^ 2 + t574 * t457;
t390 = sqrt(t437);
t448 = 0.2e1 * t451;
t468 = 0.2e1 * t477;
t357 = -t390 * t468 - t448 * t481;
t485 = t571 * t486;
t527 = 0.2e1 * t559;
t580 = (t527 * t567 + t485) * t566;
t450 = (-t509 * t486 - t567 * t491 + 0.4e1 * t510 * t506) * pkin(18) + t580;
t446 = 0.2e1 * t450;
t482 = t506 - t501;
t471 = 0.2e1 * t482;
t467 = 0.4e1 * t477;
t469 = 0.4e1 * t481;
t483 = -t507 - t502;
t452 = -t467 * t482 + t469 * t483;
t449 = 0.2e1 * t452;
t586 = -0.2e1 * t451;
t430 = t574 * t449 + t450 * t586;
t528 = 0.2e1 / t390;
t429 = t430 * t528;
t584 = -t477 * t429 / 0.2e1 - t483 * t448;
t423 = t390 * t471 - t446 * t481 + t584;
t573 = 0.1e1 / t457 ^ 2;
t447 = t573 * t449;
t456 = 0.1e1 / t457;
t329 = -t357 * t447 + t423 * t456;
t328 = t329 + t483;
t470 = 0.2e1 * t481;
t358 = t390 * t470 - t448 * t477;
t351 = t358 * t456 + t477;
t352 = t357 * t456 + t481;
t343 = t566 * t351 + t567 * t352;
t472 = 0.2e1 * t483;
t583 = t481 * t429 / 0.2e1 + t482 * t448;
t424 = t390 * t472 - t446 * t477 + t583;
t330 = -t358 * t447 + t424 * t456;
t418 = t330 - t482;
t303 = -t566 * t328 + t567 * t418 - t343;
t350 = t566 * t352;
t345 = t567 * t351 - t350;
t416 = t566 * t418;
t304 = t567 * t328 + t345 + t416;
t386 = 0.1e1 / pkin(23);
t561 = pkin(22) * t386;
t524 = cos(pkin(14)) * t561;
t525 = sin(pkin(14)) * t561;
t287 = t303 * t524 - t304 * t525;
t288 = 0.2e1 * t287;
t289 = t303 * t525 + t304 * t524;
t290 = 0.2e1 * t289;
t323 = -t343 * t525 + t345 * t524;
t495 = pkin(26) + t323;
t320 = 0.2e1 * t495;
t321 = t343 * t524 + t345 * t525;
t322 = 0.2e1 * t321;
t272 = 0.2e1 * t288 * t320 + 0.2e1 * t290 * t322;
t311 = t320 ^ 2 + t322 ^ 2;
t310 = 0.1e1 / t311 ^ 2;
t549 = t272 * t310;
t558 = pkin(18) * qJD(3);
t459 = t468 * t558;
t460 = t470 * t558;
t464 = qJD(3) * t471;
t461 = pkin(18) * t464;
t465 = qJD(3) * t472;
t462 = pkin(18) * t465;
t434 = (-t460 + t461) * t510 + (t459 - t462) * t509 + t580 * qJD(3);
t433 = 0.2e1 * t434;
t422 = t584 * qJD(3) + t390 * t464 - t433 * t481;
t445 = qJD(3) * t449;
t442 = t573 * t445;
t494 = qJD(3) * t502;
t499 = qJD(3) * t507;
t313 = -t357 * t442 + t422 * t456 - t494 - t499;
t421 = t583 * qJD(3) + t390 * t465 - t433 * t477;
t493 = qJD(3) * t501;
t498 = qJD(3) * t506;
t414 = -t358 * t442 + t421 * t456 + t493 - t498;
t513 = qJD(3) * t567;
t299 = -qJD(3) * t350 + t567 * t313 + t351 * t513 + t566 * t414;
t339 = t343 ^ 2;
t341 = 0.1e1 / t345 ^ 2;
t326 = t339 * t341 + 0.1e1;
t340 = 0.1e1 / t345;
t538 = t341 * t343;
t504 = -t566 * t313 + t567 * t414;
t298 = -qJD(3) * t343 + t504;
t544 = t298 * t340 * t341;
t587 = 0.2e1 * (-t303 * t538 + t304 * t340) * (t299 * t538 - t339 * t544) / t326 ^ 2;
t488 = t566 * t343 + t567 * t345;
t384 = sin(qJ(5));
t385 = cos(qJ(5));
t371 = pkin(19) * t384 + pkin(20) * t385;
t309 = 0.1e1 / t311;
t353 = t357 ^ 2;
t355 = 0.1e1 / t358 ^ 2;
t348 = t353 * t355 + 0.1e1;
t354 = 0.1e1 / t358;
t356 = t354 * t355;
t420 = t355 * t422;
t585 = 0.2e1 * (-t353 * t356 * t421 + t357 * t420) / t348 ^ 2;
t372 = -pkin(19) * t385 + t384 * pkin(20);
t473 = t484 * qJD(3);
t474 = qJD(3) * t481;
t512 = 0.8e1 * qJD(3);
t436 = -0.2e1 * t467 * t473 - 0.2e1 * t469 * t474 + (t482 ^ 2 + t483 ^ 2) * t512;
t582 = (t452 ^ 2 * t456 * t512 - t436) * t573;
t581 = -qJD(3) * t446 - t433;
t428 = qJD(3) * t429;
t463 = 0.2e1 * t474;
t466 = 0.2e1 * t473;
t432 = qJD(3) * t567 ^ 2 * t527 + t509 * t460 + t461 * t505 + t463 * t501 + t466 * t502 + t485 * t513 + (t459 - 0.2e1 * t462) * t510;
t431 = 0.2e1 * t432;
t444 = qJD(3) * t448;
t575 = (qJD(3) / t437 * t430 ^ 2 / 0.4e1 - t432 * t586 / 0.2e1 + t434 * t450 - t574 * t436 / 0.2e1) * t528;
t412 = (t390 * t466 + t482 * t428 + t581 * t483 + (-t431 + t444) * t481 + t575 * t477) * t456 - t423 * t442 - t422 * t447 + t582 * t357;
t410 = -t498 - t493 - t412;
t413 = (-t390 * t463 + t483 * t428 - t477 * t431 + t484 * t444 - t575 * t481 - t581 * t482) * t456 - t424 * t442 - t421 * t447 + t582 * t358;
t411 = -t499 + t494 + t413;
t269 = -t303 * qJD(3) + t567 * t410 - t566 * t411 - t504;
t579 = 0.2e1 * t303 * t343 * t544 - t269 * t340;
t577 = t298 * t304 + t299 * t303;
t576 = qJD(5) * t372;
t387 = pkin(21) ^ 2;
t280 = -pkin(24) ^ 2 + pkin(26) ^ 2 + t387 + (t320 - t323) * t323 + (t322 - t321) * t321;
t276 = -t280 ^ 2 + t311 * t387;
t389 = sqrt(t276);
t500 = -t280 * t320 + t322 * t389;
t261 = t309 * t500 + t495;
t265 = -t280 * t322 - t320 * t389;
t263 = -t265 * t309 - t321;
t381 = sin(pkin(13));
t383 = cos(pkin(13));
t388 = 0.1e1 / pkin(24);
t245 = (t261 * t381 + t263 * t383) * t388;
t246 = (-t261 * t383 + t263 * t381) * t388;
t241 = (t245 * t383 + t246 * t381) * pkin(24) + t321;
t238 = 0.1e1 / t241;
t258 = 0.1e1 / t261;
t530 = t488 * t386;
t317 = t530 * pkin(23) - t477;
t314 = 0.1e1 / t317;
t377 = -qJ(4) + t526;
t374 = cos(t377);
t368 = -pkin(18) * t374 - pkin(16) - t371;
t365 = 0.1e1 / t368;
t274 = 0.1e1 / t389;
t239 = 0.1e1 / t241 ^ 2;
t259 = 0.1e1 / t261 ^ 2;
t315 = 0.1e1 / t317 ^ 2;
t366 = 0.1e1 / t368 ^ 2;
t572 = -0.2e1 * t280;
t569 = -t320 / 0.2e1;
t568 = t322 / 0.2e1;
t379 = qJD(3) - qJD(4);
t565 = pkin(18) * t379;
t560 = pkin(23) * t386;
t283 = t298 * t524 - t299 * t525;
t284 = 0.2e1 * t283;
t285 = t298 * t525 + t299 * t524;
t286 = 0.2e1 * t285;
t271 = 0.2e1 * t284 * t320 + 0.2e1 * t286 * t322;
t531 = -0.2e1 * t321 + t322;
t532 = t320 - 0.2e1 * t323;
t250 = t532 * t283 + t284 * t323 + t531 * t285 + t286 * t321;
t242 = t250 * t572 + t271 * t387;
t514 = t274 * t568;
t476 = t242 * t514 - t320 * t250 - t284 * t280 + t286 * t389;
t492 = t310 * t500;
t223 = -t271 * t492 + t309 * t476 + t283;
t515 = t274 * t569;
t232 = t242 * t515 - t250 * t322 - t280 * t286 - t284 * t389;
t550 = t271 * t310;
t224 = -t232 * t309 + t265 * t550 - t285;
t218 = (t223 * t381 + t224 * t383) * t388;
t219 = (-t223 * t383 + t224 * t381) * t388;
t210 = (t218 * t383 + t219 * t381) * pkin(24) + t285;
t557 = t210 * t238 * t239;
t555 = t223 * t258 * t259;
t237 = -(t245 * t381 - t246 * t383) * pkin(24) + t495;
t554 = t237 * t239;
t553 = t259 * t263;
t487 = t566 * t298 - t567 * t299;
t279 = t483 * qJD(3) + (qJD(3) * t488 + t487) * t560;
t516 = t566 * t345;
t519 = t567 * t343;
t319 = (-t519 + t516) * t560 + t481;
t318 = t319 ^ 2;
t308 = t315 * t318 + 0.1e1;
t540 = t315 * t319;
t520 = (t298 * t567 + t299 * t566 + t343 * t513) * t386;
t278 = t520 * pkin(23) + (-t516 * t560 + t482) * qJD(3);
t546 = t278 * t314 * t315;
t552 = 0.2e1 * (t279 * t540 - t318 * t546) / t308 ^ 2;
t548 = t274 * t309;
t306 = 0.1e1 / t308;
t541 = t306 * t315;
t537 = t355 * t357;
t373 = sin(t377);
t370 = pkin(18) * t373 + t372;
t369 = t370 ^ 2;
t362 = t366 * t369 + 0.1e1;
t529 = t371 * qJD(5);
t363 = t374 * t565 + t529;
t534 = t366 * t370;
t364 = t373 * t565 + t576;
t535 = t364 * t365 * t366;
t536 = 0.2e1 * (t363 * t534 - t369 * t535) / t362 ^ 2;
t270 = -qJD(3) * t416 - t328 * t513 + t566 * t410 + t567 * t411 - t299;
t533 = t269 * t524 - t270 * t525;
t251 = t532 * t287 + t288 * t323 + t531 * t289 + t290 * t321;
t243 = t251 * t572 + t272 * t387;
t523 = t274 / t276 * t243 * t242;
t521 = t309 * t271 * t549;
t511 = -0.2e1 * t370 * t535;
t497 = t269 * t525 + t270 * t524;
t489 = t566 * t303 - t567 * t304;
t479 = t567 * t303 + t566 * t304 - t516;
t475 = t243 * t514 - t320 * t251 - t288 * t280 + t290 * t389;
t255 = 0.2e1 * t533;
t257 = 0.2e1 * t497;
t222 = -t255 * t321 + t257 * t323 + t284 * t287 + t286 * t289 + (-0.2e1 * t289 + t290) * t285 + (-0.2e1 * t287 + t288) * t283 + t532 * t497 - t531 * t533;
t235 = -0.2e1 * t255 * t322 + 0.2e1 * t257 * t320 + 0.2e1 * t284 * t288 + 0.2e1 * t286 * t290;
t217 = t222 * t572 + t235 * t387 - 0.2e1 * t250 * t251;
t233 = t243 * t515 - t251 * t322 - t280 * t290 - t288 * t389;
t208 = -(-t222 * t322 - t251 * t286 - t250 * t290 + t280 * t255 - t257 * t389 + t320 * t523 / 0.4e1) * t309 - 0.2e1 * t265 * t521 - (-t288 * t242 / 0.2e1 - t284 * t243 / 0.2e1 + t217 * t569) * t548 + (t232 * t272 + t233 * t271 + t235 * t265) * t310 + t533;
t209 = (-t257 * t280 - t288 * t250 - t284 * t251 - t320 * t222 - t255 * t389 - t322 * t523 / 0.4e1) * t309 - t475 * t550 - t476 * t549 + 0.2e1 * t500 * t521 - t235 * t492 + (t290 * t242 / 0.2e1 + t286 * t243 / 0.2e1 + t217 * t568) * t548 + t497;
t225 = -t272 * t492 + t309 * t475 + t287;
t226 = -t233 * t309 + t265 * t549 - t289;
t262 = t263 ^ 2;
t249 = t259 * t262 + 0.1e1;
t458 = 0.2e1 * (t225 * t553 - t226 * t258) * (t224 * t553 - t262 * t555) / t249 ^ 2 + (t208 * t258 + 0.2e1 * t225 * t263 * t555 + (-t209 * t263 - t223 * t226 - t224 * t225) * t259) / t249;
t346 = 0.1e1 / t348;
t455 = t346 * t457;
t454 = t354 * t457;
t453 = t457 * t537;
t443 = t346 * t445;
t419 = t421 * t455;
t360 = 0.1e1 / t362;
t331 = ((t365 * t374 - t373 * t534) * t536 + ((t365 * t379 + t511) * t373 + (t363 * t373 + (t370 * t379 + t364) * t374) * t366) * t360) * pkin(18);
t324 = 0.1e1 / t326;
t236 = t237 ^ 2;
t229 = t236 * t239 + 0.1e1;
t221 = (-t225 * t383 + t226 * t381) * t388;
t220 = (t225 * t381 + t226 * t383) * t388;
t213 = -(t220 * t381 - t221 * t383) * pkin(24) + t287;
t212 = (t220 * t383 + t221 * t381) * pkin(24) + t289;
t211 = -(t218 * t381 - t219 * t383) * pkin(24) + t283;
t205 = (t208 * t383 + t209 * t381) * t388;
t204 = (t208 * t381 - t209 * t383) * t388;
t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, t458, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0.2e1 * (-t212 * t554 + t213 * t238) / t229 ^ 2 * (t211 * t554 - t236 * t557) + (-(-(-t204 * t383 + t205 * t381) * pkin(24) + t497) * t238 - 0.2e1 * t212 * t237 * t557 + (t213 * t210 + ((t204 * t381 + t205 * t383) * pkin(24) - t533) * t237 + t212 * t211) * t239) / t229 + t458, 0, 0, 0; 0, 0, -t587 + ((-t270 * t343 - t577) * t341 + t579) * t324, 0, 0, 0; 0, 0, t587 + (-(((t567 * t269 + t566 * t270) * t386 + t520) * pkin(23) + (t479 * t560 - t481) * qJD(3)) * t314 + (t473 + (t567 * t270 - t566 * t269 + (-t488 - t489) * qJD(3) - t487) * t560) * t540) * t306 + (t278 * t541 + t314 * t552) * ((t386 * t489 + t530) * pkin(23) + t483) + (-0.2e1 * t319 * t306 * t546 + t279 * t541 - t540 * t552) * ((t519 + t479) * t560 + t482) + (t270 * t538 + t341 * t577 - t579) * t324, 0, 0, 0; 0, 0, (-t412 * t454 + t413 * t453) * t346 + (-t354 * t443 + t355 * t419 + t454 * t585) * t329 + (-0.2e1 * t356 * t357 * t419 + t420 * t455 + t443 * t537 - t453 * t585) * t330, 0, 0, 0; 0, 0, t331, -t331, (t365 * t371 - t372 * t534) * t536 + (t372 * t511 + t365 * t576 + (t372 * t363 + t371 * t364 + t529 * t370) * t366) * t360, 0;];
WD = t1;
