% Calculate inertial parameters regressor of fixed base kinetic energy for
% KAS5m7DE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [24x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[delta10,delta12,delta17,delta18,delta20,delta8,delta9,l1,l11,l12,l13,l14,l15,l17,l18,l2,l20,l21,l22,l23,l3,l4,l5,l6]';
% 
% Output:
% T_reg [1x(5*10)]
%   inertial parameter regressor of kinetic energy

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-25 11:30
% Revision: 91226b68921adecbf67aba0faa97e308f05cdafe (2020-05-14)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_reg = KAS5m7DE1_energykin_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(24,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'KAS5m7DE1_energykin_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'KAS5m7DE1_energykin_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [24 1]), ...
  'KAS5m7DE1_energykin_fixb_reg2_slag_vp: pkin has to be [24x1] (double)');

%% Symbolic Calculation
% From energy_kinetic_fixb_regressor_matlab.m
% OptimizationMode: 1
% StartTime: 2020-05-21 11:11:52
% EndTime: 2020-05-21 11:33:39
% DurationCPUTime: 1306.20s
% Computational Cost: add. (94603031->352), mult. (125158796->701), div. (1706733->24), fcn. (49238941->41), ass. (0->516)
unknown=NaN(1,150);
t1 = qJD(1) ^ 2;
t3 = cos(qJ(2));
t4 = t3 ^ 2;
t5 = t4 * t1;
t8 = sin(qJ(2));
t10 = t3 * qJD(1);
t12 = t8 ^ 2;
t13 = t12 * t1;
t14 = t13 / 0.2e1;
t15 = t8 * qJD(1);
t17 = qJD(2) ^ 2;
t19 = pkin(16) * qJD(2);
t25 = pkin(16) ^ 2;
t27 = t5 * t25;
t29 = sin(qJ(3));
t30 = cos(qJ(3));
t31 = -pkin(23) + pkin(24);
t32 = t30 * t31;
t33 = pkin(3) + qJ(3);
t34 = cos(t33);
t35 = t34 * pkin(12);
t36 = -pkin(9) + t32 + t35;
t37 = pkin(11) ^ 2;
t38 = pkin(19) ^ 2;
t39 = t34 ^ 2;
t40 = pkin(12) ^ 2;
t42 = sin(t33);
t43 = t42 ^ 2;
t45 = -pkin(9) + t32;
t46 = t45 ^ 2;
t47 = t29 ^ 2;
t48 = t31 ^ 2;
t52 = t29 * t31;
t53 = t42 * pkin(12);
t54 = -t52 + t53;
t57 = 0.2e1 * pkin(12) * t34 * t36 + 0.2e1 * pkin(12) * t42 * t54 - t39 * t40 - t43 * t40 + t47 * t48 + t37 - t38 + t46;
t61 = 0.4e1 * t36 ^ 2 + 0.4e1 * t54 ^ 2;
t63 = t57 ^ 2;
t65 = sqrt(t37 * t61 - t63);
t67 = 0.2e1 * t36 * t57 - 0.2e1 * t54 * t65;
t68 = 0.1e1 / t61;
t70 = t67 * t68 + pkin(9) - t32 - t35;
t74 = 0.2e1 * t36 * t65 + 0.2e1 * t57 * t54;
t76 = t74 * t68 + t52 - t53;
t78 = t29 * t70 + t30 * t76;
t79 = 0.1e1 / pkin(19);
t80 = t78 * t79;
t81 = cos(pkin(7));
t82 = t81 * pkin(18);
t83 = t80 * t82;
t86 = -t29 * t76 + t30 * t70;
t87 = t86 * t79;
t88 = sin(pkin(7));
t89 = t88 * pkin(18);
t90 = t87 * t89;
t91 = pkin(17) ^ 2;
t92 = pkin(22) ^ 2;
t93 = t87 * t82;
t94 = t80 * t89;
t95 = t93 - t94;
t96 = t95 ^ 2;
t97 = t83 + t90;
t98 = t97 ^ 2;
t99 = pkin(24) ^ 2;
t100 = -pkin(24) - t93 + t94;
t103 = -0.2e1 * t100 * t95 + 0.2e1 * t97 ^ 2 + t91 - t92 - t96 - t98 + t99;
t107 = 0.4e1 * t100 ^ 2 + 0.4e1 * t97 ^ 2;
t109 = t103 ^ 2;
t111 = sqrt(t91 * t107 - t109);
t113 = 0.2e1 * t100 * t111 - 0.2e1 * t103 * t97;
t114 = 0.1e1 / t107;
t116 = -t113 * t114 - t83 - t90;
t119 = 0.2e1 * t100 * t103 + 0.2e1 * t97 * t111;
t121 = t119 * t114 + pkin(24) + t93 - t94;
t122 = atan2(t116, t121);
t123 = t122 + pkin(6);
t124 = sin(t123);
t125 = t124 * t3;
t127 = cos(t123);
t129 = -qJD(1) * t125 - qJD(2) * t127;
t130 = t129 ^ 2;
t132 = t127 * t3;
t135 = -qJD(1) * t132 + qJD(2) * t124;
t137 = qJD(3) * t30;
t139 = qJD(3) * t29;
t140 = t139 * t31;
t142 = qJD(3) * t42 * pkin(12);
t143 = -t140 - t142;
t155 = t137 * t31;
t157 = qJD(3) * t34 * pkin(12);
t158 = -t155 + t157;
t163 = 0.2e1 * pkin(12) * t143 * t34 + 0.2e1 * pkin(12) * t158 * t42 + 0.2e1 * qJD(3) * t35 * t54 - 0.2e1 * qJD(3) * t36 * t53 - 0.2e1 * qJD(3) * t45 * t52 + 0.2e1 * t137 * t29 * t48;
t166 = 0.1e1 / t65;
t170 = 0.4e1 * t36 * t143 + 0.4e1 * t54 * t158;
t174 = -0.2e1 * t57 * t163 + 0.2e1 * t37 * t170;
t179 = t61 ^ 2;
t180 = 0.1e1 / t179;
t183 = t140 + t142 + (-t166 * t174 * t54 + 0.2e1 * t143 * t57 - 0.2e1 * t158 * t65 + 0.2e1 * t36 * t163) * t68 - 0.2e1 * t67 * t180 * t170;
t196 = t155 - t157 + (t166 * t174 * t36 + 0.2e1 * t143 * t65 + 0.2e1 * t57 * t158 + 0.2e1 * t163 * t54) * t68 - 0.2e1 * t74 * t180 * t170;
t198 = t137 * t70 - t139 * t76 + t29 * t183 + t30 * t196;
t199 = t198 * t79;
t200 = t199 * t82;
t205 = -t137 * t76 - t139 * t70 + t30 * t183 - t29 * t196;
t206 = t205 * t79;
t207 = t206 * t89;
t208 = t206 * t82;
t209 = t199 * t89;
t210 = t208 - t209;
t213 = t200 + t207;
t219 = -0.2e1 * t100 * t210 + 0.2e1 * t97 * t213;
t223 = 0.1e1 / t111;
t227 = -0.4e1 * t100 * t210 + 0.4e1 * t97 * t213;
t231 = -0.2e1 * t103 * t219 + 0.2e1 * t91 * t227;
t236 = t107 ^ 2;
t237 = 0.1e1 / t236;
t240 = -t200 - t207 - (t100 * t223 * t231 - 0.2e1 * t103 * t213 - 0.2e1 * t210 * t111 - 0.2e1 * t219 * t97) * t114 + 0.2e1 * t113 * t237 * t227;
t243 = t116 ^ 2;
t244 = t121 ^ 2;
t245 = 0.1e1 / t244;
t248 = 0.1e1 / (t243 * t245 + 0.1e1);
t249 = t240 / t121 * t248;
t260 = t208 - t209 + (t223 * t231 * t97 + 0.2e1 * t100 * t219 - 0.2e1 * t210 * t103 + 0.2e1 * t213 * t111) * t114 - 0.2e1 * t119 * t237 * t227;
t263 = t260 * t116 * t245 * t248;
t264 = -t15 + t249 - t263;
t266 = t135 ^ 2;
t269 = t264 ^ 2;
t273 = pkin(16) * t15 + qJD(2) * pkin(21);
t274 = t127 * t273;
t275 = qJD(1) * pkin(21);
t276 = t125 * t275;
t277 = t274 + t276;
t284 = t124 * t273 - t132 * t275;
t292 = t284 ^ 2;
t293 = t277 ^ 2;
t297 = t30 * t129 + t29 * t135;
t298 = t297 ^ 2;
t302 = -t29 * t129 + t30 * t135;
t304 = -t15 + t249 - t263 + qJD(3);
t306 = t302 ^ 2;
t309 = t304 ^ 2;
t311 = t10 * pkin(16);
t312 = t135 * pkin(23);
t313 = -t311 - t312;
t315 = t29 * t284;
t317 = pkin(23) * t264 + t274 + t276;
t318 = t30 * t317;
t319 = -t315 + t318;
t324 = t30 * t284 + t29 * t317;
t331 = t324 ^ 2;
t332 = t319 ^ 2;
t333 = t313 ^ 2;
t335 = cos(qJ(4));
t337 = sin(qJ(4));
t339 = t335 * t297 + t337 * t302;
t340 = t339 ^ 2;
t344 = -t337 * t297 + t335 * t302;
t346 = -t15 + t249 - t263 + qJD(3) + qJD(4);
t348 = t344 ^ 2;
t351 = t346 ^ 2;
t353 = t337 * t324;
t355 = pkin(9) * t304 - t315 + t318;
t356 = t335 * t355;
t357 = -t353 + t356;
t359 = t302 * pkin(9);
t360 = -t311 - t312 - t359;
t365 = t335 * t324 + t337 * t355;
t372 = t365 ^ 2;
t373 = t357 ^ 2;
t374 = t360 ^ 2;
t376 = qJ(4) - qJ(3) + pkin(4);
t377 = sin(t376);
t379 = cos(t376);
t381 = -t377 * t339 + t379 * t344;
t382 = t381 ^ 2;
t384 = t379 * t339;
t385 = t377 * t344;
t386 = -t384 - t385;
t389 = -t15 + t249 - t263 + 0.2e1 * qJD(4);
t391 = t386 ^ 2;
t394 = t389 ^ 2;
t398 = pkin(10) * t346 - t353 + t356;
t400 = -t379 * t365 - t377 * t398;
t402 = t344 * pkin(10);
t403 = -t311 - t312 - t359 - t402;
t406 = t377 * t365;
t407 = t379 * t398;
t408 = -t406 + t407;
t415 = t408 ^ 2;
t416 = t400 ^ 2;
t417 = t403 ^ 2;
t419 = cos(qJ(5));
t421 = sin(qJ(5));
t423 = t419 * t381 + t421 * t389;
t424 = t423 ^ 2;
t428 = -t421 * t381 + t419 * t389;
t430 = t384 + t385 + qJD(5);
t432 = t428 ^ 2;
t435 = t430 ^ 2;
t439 = pkin(13) * t389 - t406 + t407;
t442 = -pkin(13) * t381 - t311 - t312 - t359 - t402;
t444 = t419 * t442 - t421 * t439;
t449 = t419 * t439 + t421 * t442;
t456 = t449 ^ 2;
t457 = t444 ^ 2;
t459 = sin(pkin(6));
t460 = t459 * t3;
t462 = cos(pkin(6));
t464 = qJD(1) * t460 + qJD(2) * t462;
t465 = t464 ^ 2;
t467 = t462 * t3;
t470 = qJD(1) * t467 - qJD(2) * t459;
t473 = t470 ^ 2;
t476 = t462 * t273;
t477 = t460 * t275;
t478 = -t476 - t477;
t486 = -t459 * t273 + t467 * t275;
t495 = t486 ^ 2;
t496 = t478 ^ 2;
t498 = 0.1e1 / pkin(22);
t499 = t116 * t498;
t501 = -t121 * t498;
t503 = t499 * t459 + t501 * t462;
t507 = -t501 * t459 + t499 * t462;
t511 = -(t507 * t459 - t503 * t462) * pkin(22) + pkin(24) + t93 - t94;
t516 = (t503 * t459 + t507 * t462) * pkin(22) + t83 + t90;
t517 = atan2(t511, t516);
t518 = t122 - t517;
t519 = sin(t518);
t521 = cos(t518);
t523 = t519 * t464 - t521 * t470;
t524 = t523 ^ 2;
t528 = t521 * t464 + t519 * t470;
t530 = t240 * t498;
t532 = -t260 * t498;
t534 = t530 * t459 + t532 * t462;
t538 = -t532 * t459 + t530 * t462;
t545 = t511 ^ 2;
t546 = t516 ^ 2;
t547 = 0.1e1 / t546;
t550 = 0.1e1 / (t545 * t547 + 0.1e1);
t560 = -t15 + t249 - t263 - (-(t538 * t459 - t534 * t462) * pkin(22) + t208 - t209) / t516 * t550 + ((t534 * t459 + t538 * t462) * pkin(22) + t200 + t207) * t511 * t547 * t550;
t562 = t528 ^ 2;
t565 = t560 ^ 2;
t568 = pkin(22) * t470 - t311;
t572 = pkin(22) * t15 - t476 - t477;
t574 = t521 * t486 + t519 * t572;
t580 = t519 * t486 - t521 * t572;
t586 = t580 ^ 2;
t587 = t574 ^ 2;
t588 = t568 ^ 2;
t590 = atan2(-t78, t86);
t591 = cos(t590);
t593 = sin(t590);
t595 = t591 * t129 - t593 * t135;
t596 = t595 ^ 2;
t600 = t593 * t129 + t591 * t135;
t604 = t78 ^ 2;
t605 = t86 ^ 2;
t606 = 0.1e1 / t605;
t609 = 0.1e1 / (t604 * t606 + 0.1e1);
t614 = -t15 + t249 - t263 + t198 / t86 * t609 - t205 * t78 * t606 * t609;
t616 = t600 ^ 2;
t619 = t614 ^ 2;
t621 = t593 * t284;
t623 = pkin(24) * t264 + t274 + t276;
t624 = t591 * t623;
t625 = t621 + t624;
t627 = t135 * pkin(24);
t628 = -t311 - t627;
t634 = t591 * t284 - t593 * t623;
t640 = t634 ^ 2;
t641 = t625 ^ 2;
t642 = t628 ^ 2;
t650 = (t29 * t79 * t86 - t30 * t78 * t79) * pkin(19) + t52 - t53;
t657 = (t29 * t78 * t79 + t30 * t79 * t86) * pkin(19) - pkin(9) + t32 + t35;
t658 = atan2(t650, t657);
t659 = -t658 + qJ(3) + t590;
t660 = cos(t659);
t662 = sin(t659);
t664 = -t660 * t595 - t662 * t600;
t665 = t664 ^ 2;
t669 = t662 * t595 - t660 * t600;
t682 = t650 ^ 2;
t683 = t657 ^ 2;
t684 = 0.1e1 / t683;
t687 = 0.1e1 / (t682 * t684 + 0.1e1);
t701 = -t15 + t249 - t263 - ((-t198 * t30 * t79 + t205 * t29 * t79 + t137 * t87 + t139 * t80) * pkin(19) + t155 - t157) / t657 * t687 + ((t198 * t29 * t79 + t205 * t30 * t79 + t137 * t80 - t139 * t87) * pkin(19) - t140 - t142) * t650 * t684 * t687 + qJD(3);
t703 = t669 ^ 2;
t706 = t701 ^ 2;
t710 = pkin(19) * t614 + t621 + t624;
t712 = t662 * t634 - t660 * t710;
t715 = -pkin(19) * t600 - t311 - t627;
t720 = -t660 * t634 - t662 * t710;
t727 = t720 ^ 2;
t728 = t712 ^ 2;
t729 = t715 ^ 2;
t733 = t29 * t297 - t30 * t302;
t734 = t733 ^ 2;
t738 = t29 * t302 + t30 * t297;
t741 = -t15 + t249 - t263 + 0.2e1 * qJD(3);
t743 = t738 ^ 2;
t746 = t741 ^ 2;
t747 = t746 / 0.2e1;
t750 = t29 * t355 + t30 * t324;
t756 = t29 * t324 - t30 * t355;
t763 = t756 ^ 2;
t764 = t750 ^ 2;
t766 = sin(pkin(3));
t768 = cos(pkin(3));
t770 = t766 * t733 - t768 * t738;
t771 = t770 ^ 2;
t775 = t768 * t733 + t766 * t738;
t778 = t775 ^ 2;
t781 = t768 * t756;
t782 = t766 * t750;
t783 = t781 + t782;
t789 = -t768 * t750 + t766 * t756;
t796 = t789 ^ 2;
t797 = t783 ^ 2;
t800 = pkin(3) + qJ(3) - qJ(4);
t801 = sin(t800);
t804 = pkin(12) * t801 - pkin(14) * t379 + pkin(15) * t377;
t807 = cos(t800);
t809 = -pkin(12) * t807 - pkin(14) * t377 - pkin(15) * t379 - pkin(10);
t810 = atan2(t804, t809);
t811 = t810 + pkin(3) + qJ(3) - qJ(4);
t812 = sin(t811);
t814 = cos(t811);
t816 = t812 * t770 + t814 * t775;
t817 = t816 ^ 2;
t818 = t817 / 0.2e1;
t821 = -t814 * t770 + t812 * t775;
t823 = qJD(4) - qJD(3);
t824 = t823 * t379;
t828 = t823 * t377;
t830 = -pkin(12) * t807 * t823 + pkin(14) * t828 + pkin(15) * t824;
t833 = t804 ^ 2;
t834 = t809 ^ 2;
t835 = 0.1e1 / t834;
t838 = 0.1e1 / (t833 * t835 + 0.1e1);
t844 = -pkin(12) * t801 * t823 - pkin(14) * t824 + pkin(15) * t828;
t848 = -t15 + t249 - t263 + qJD(3) - t830 / t809 * t838 + t844 * t804 * t835 * t838 + qJD(4);
t849 = t848 * t816;
t850 = t821 ^ 2;
t851 = t850 / 0.2e1;
t853 = t848 ^ 2;
t854 = t853 / 0.2e1;
t855 = t814 * t789;
t857 = pkin(12) * t741 + t781 + t782;
t858 = t812 * t857;
t859 = -t855 + t858;
t861 = t775 * pkin(12);
t862 = -t311 - t312 - t359 - t861;
t865 = t812 * t789;
t866 = t814 * t857;
t867 = t865 + t866;
t874 = t867 ^ 2;
t875 = t859 ^ 2;
t876 = t862 ^ 2;
t881 = sqrt(t834 + t833);
t883 = -t816 * t881 - t311 - t312 - t359 - t861;
t891 = t855 - t858 + 0.1e1 / t881 * (t804 * t830 + t809 * t844);
t895 = t848 * t881 + t865 + t866;
t902 = t895 ^ 2;
t903 = t883 ^ 2;
t904 = t891 ^ 2;
unknown(1,1) = 0;
unknown(1,2) = 0;
unknown(1,3) = 0;
unknown(1,4) = 0;
unknown(1,5) = 0;
unknown(1,6) = (t1 / 0.2e1);
unknown(1,7) = 0;
unknown(1,8) = 0;
unknown(1,9) = 0;
unknown(1,10) = 0;
unknown(1,11) = (t5 / 0.2e1);
unknown(1,12) = -(t3 * t1 * t8);
unknown(1,13) = -(t10 * qJD(2));
unknown(1,14) = t14;
unknown(1,15) = (t15 * qJD(2));
unknown(1,16) = (t17 / 0.2e1);
unknown(1,17) = (t10 * t19);
unknown(1,18) = -(t15 * t19);
unknown(1,19) = (pkin(16) * t13 + pkin(16) * t5);
unknown(1,20) = (t13 * t25 / 0.2e1 + t27 / 0.2e1);
unknown(1,21) = (t130 / 0.2e1);
unknown(1,22) = (t129 * t135);
unknown(1,23) = (t129 * t264);
unknown(1,24) = (t266 / 0.2e1);
unknown(1,25) = (t264 * t135);
unknown(1,26) = (t269 / 0.2e1);
unknown(1,27) = (pkin(16) * t10 * t135 + t277 * t264);
unknown(1,28) = (-pkin(16) * t10 * t129 - t284 * t264);
unknown(1,29) = (-t277 * t129 + t284 * t135);
unknown(1,30) = (t292 / 0.2e1 + t293 / 0.2e1 + t27 / 0.2e1);
unknown(1,31) = (t298 / 0.2e1);
unknown(1,32) = (t297 * t302);
unknown(1,33) = (t297 * t304);
unknown(1,34) = (t306 / 0.2e1);
unknown(1,35) = (t302 * t304);
unknown(1,36) = (t309 / 0.2e1);
unknown(1,37) = (-t313 * t302 + t319 * t304);
unknown(1,38) = (t313 * t297 - t324 * t304);
unknown(1,39) = (-t319 * t297 + t324 * t302);
unknown(1,40) = (t331 / 0.2e1 + t332 / 0.2e1 + t333 / 0.2e1);
unknown(1,41) = (t340 / 0.2e1);
unknown(1,42) = (t344 * t339);
unknown(1,43) = (t346 * t339);
unknown(1,44) = (t348 / 0.2e1);
unknown(1,45) = (t344 * t346);
unknown(1,46) = (t351 / 0.2e1);
unknown(1,47) = (-t360 * t344 + t357 * t346);
unknown(1,48) = (t360 * t339 - t365 * t346);
unknown(1,49) = (-t357 * t339 + t365 * t344);
unknown(1,50) = (t372 / 0.2e1 + t373 / 0.2e1 + t374 / 0.2e1);
unknown(1,51) = (t382 / 0.2e1);
unknown(1,52) = (t386 * t381);
unknown(1,53) = (t389 * t381);
unknown(1,54) = (t391 / 0.2e1);
unknown(1,55) = (t386 * t389);
unknown(1,56) = (t394 / 0.2e1);
unknown(1,57) = (-t403 * t386 + t400 * t389);
unknown(1,58) = (t403 * t381 - t408 * t389);
unknown(1,59) = (-t400 * t381 + t408 * t386);
unknown(1,60) = (t415 / 0.2e1 + t416 / 0.2e1 + t417 / 0.2e1);
unknown(1,61) = (t424 / 0.2e1);
unknown(1,62) = (t428 * t423);
unknown(1,63) = (t423 * t430);
unknown(1,64) = (t432 / 0.2e1);
unknown(1,65) = (t428 * t430);
unknown(1,66) = (t435 / 0.2e1);
unknown(1,67) = (t400 * t428 + t444 * t430);
unknown(1,68) = (-t400 * t423 - t449 * t430);
unknown(1,69) = (-t444 * t423 + t449 * t428);
unknown(1,70) = (t456 / 0.2e1 + t457 / 0.2e1 + t416 / 0.2e1);
unknown(1,71) = (t465 / 0.2e1);
unknown(1,72) = (t470 * t464);
unknown(1,73) = -(t15 * t464);
unknown(1,74) = (t473 / 0.2e1);
unknown(1,75) = -(t15 * t470);
unknown(1,76) = t14;
unknown(1,77) = (pkin(16) * t10 * t470 - qJD(1) * t478 * t8);
unknown(1,78) = (-pkin(16) * t10 * t464 + qJD(1) * t486 * t8);
unknown(1,79) = (-t478 * t464 + t486 * t470);
unknown(1,80) = (t495 / 0.2e1 + t496 / 0.2e1 + t27 / 0.2e1);
unknown(1,81) = (t524 / 0.2e1);
unknown(1,82) = (t523 * t528);
unknown(1,83) = (t523 * t560);
unknown(1,84) = (t562 / 0.2e1);
unknown(1,85) = (t528 * t560);
unknown(1,86) = (t565 / 0.2e1);
unknown(1,87) = (-t568 * t528 + t574 * t560);
unknown(1,88) = (t568 * t523 - t580 * t560);
unknown(1,89) = (-t574 * t523 + t580 * t528);
unknown(1,90) = (t586 / 0.2e1 + t587 / 0.2e1 + t588 / 0.2e1);
unknown(1,91) = (t596 / 0.2e1);
unknown(1,92) = (t600 * t595);
unknown(1,93) = (t614 * t595);
unknown(1,94) = (t616 / 0.2e1);
unknown(1,95) = (t600 * t614);
unknown(1,96) = (t619 / 0.2e1);
unknown(1,97) = (-t628 * t600 + t625 * t614);
unknown(1,98) = (t628 * t595 - t634 * t614);
unknown(1,99) = (-t625 * t595 + t634 * t600);
unknown(1,100) = (t640 / 0.2e1 + t641 / 0.2e1 + t642 / 0.2e1);
unknown(1,101) = (t665 / 0.2e1);
unknown(1,102) = (t669 * t664);
unknown(1,103) = (t701 * t664);
unknown(1,104) = (t703 / 0.2e1);
unknown(1,105) = (t669 * t701);
unknown(1,106) = (t706 / 0.2e1);
unknown(1,107) = (-t715 * t669 + t712 * t701);
unknown(1,108) = (t715 * t664 - t720 * t701);
unknown(1,109) = (-t712 * t664 + t720 * t669);
unknown(1,110) = (t727 / 0.2e1 + t728 / 0.2e1 + t729 / 0.2e1);
unknown(1,111) = (t734 / 0.2e1);
unknown(1,112) = (t738 * t733);
unknown(1,113) = (t733 * t741);
unknown(1,114) = (t743 / 0.2e1);
unknown(1,115) = (t738 * t741);
unknown(1,116) = t747;
unknown(1,117) = (-t360 * t738 + t750 * t741);
unknown(1,118) = (t360 * t733 - t756 * t741);
unknown(1,119) = (-t750 * t733 + t756 * t738);
unknown(1,120) = (t763 / 0.2e1 + t764 / 0.2e1 + t374 / 0.2e1);
unknown(1,121) = (t771 / 0.2e1);
unknown(1,122) = (t775 * t770);
unknown(1,123) = (t741 * t770);
unknown(1,124) = (t778 / 0.2e1);
unknown(1,125) = (t741 * t775);
unknown(1,126) = t747;
unknown(1,127) = (-t360 * t775 + t783 * t741);
unknown(1,128) = (t360 * t770 - t789 * t741);
unknown(1,129) = (-t783 * t770 + t789 * t775);
unknown(1,130) = (t796 / 0.2e1 + t797 / 0.2e1 + t374 / 0.2e1);
unknown(1,131) = t818;
unknown(1,132) = (t816 * t821);
unknown(1,133) = t849;
unknown(1,134) = t851;
unknown(1,135) = (t848 * t821);
unknown(1,136) = t854;
unknown(1,137) = (-t862 * t821 + t859 * t848);
unknown(1,138) = (t862 * t816 - t867 * t848);
unknown(1,139) = (-t859 * t816 + t867 * t821);
unknown(1,140) = (t874 / 0.2e1 + t875 / 0.2e1 + t876 / 0.2e1);
unknown(1,141) = t818;
unknown(1,142) = t849;
unknown(1,143) = -(t816 * t821);
unknown(1,144) = t854;
unknown(1,145) = -(t848 * t821);
unknown(1,146) = t851;
unknown(1,147) = (-t883 * t821 - t891 * t848);
unknown(1,148) = (t891 * t816 + t895 * t821);
unknown(1,149) = (-t883 * t816 + t895 * t848);
unknown(1,150) = (t902 / 0.2e1 + t903 / 0.2e1 + t904 / 0.2e1);
T_reg = unknown;
