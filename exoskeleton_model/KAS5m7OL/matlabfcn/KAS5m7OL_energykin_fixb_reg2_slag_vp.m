% Calculate inertial parameters regressor of fixed base kinetic energy for
% KAS5m7OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [13x1]
%   Generalized joint coordinates (joint angles)
% qJD [13x1]
%   Generalized joint velocities
% pkin [19x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[delta17,delta20,delta8,delta9,l1,l11,l12,l13,l14,l15,l2,l20,l21,l22,l23,l3,l4,l5,l6]';
% 
% Output:
% T_reg [1x(13*10)]
%   inertial parameter regressor of kinetic energy

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-30 18:16
% Revision: b9e8aa5c608190a7b43c48aaebfd2074f0379b0d (2020-06-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_reg = KAS5m7OL_energykin_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(13,1),zeros(13,1),zeros(19,1)}
assert(isreal(qJ) && all(size(qJ) == [13 1]), ...
  'KAS5m7OL_energykin_fixb_reg2_slag_vp: qJ has to be [13x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [13 1]), ...
  'KAS5m7OL_energykin_fixb_reg2_slag_vp: qJD has to be [13x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [19 1]), ...
  'KAS5m7OL_energykin_fixb_reg2_slag_vp: pkin has to be [19x1] (double)');

%% Symbolic Calculation
% From energy_kinetic_fixb_regressor_matlab.m
% OptimizationMode: 1
% StartTime: 2020-06-30 17:50:28
% EndTime: 2020-06-30 17:50:28
% DurationCPUTime: 0.41s
% Computational Cost: add. (4589->189), mult. (10416->415), div. (0->0), fcn. (8158->26), ass. (0->370)
unknown=NaN(1,150);
t1 = qJD(1) ^ 2;
t3 = cos(qJ(2));
t4 = t3 ^ 2;
t5 = t4 * t1;
t7 = sin(qJ(2));
t12 = t7 ^ 2;
t13 = t12 * t1;
t14 = t13 / 0.2e1;
t17 = qJD(2) ^ 2;
t19 = t3 * qJD(1);
t20 = pkin(11) * qJD(2);
t22 = t7 * qJD(1);
t27 = pkin(11) ^ 2;
t29 = t5 * t27;
t31 = cos(qJ(3));
t32 = t31 * t3;
t34 = sin(qJ(3));
t36 = -qJD(1) * t32 + qJD(2) * t34;
t37 = t36 ^ 2;
t39 = t34 * t3;
t42 = qJD(1) * t39 + qJD(2) * t31;
t44 = -t22 + qJD(3);
t46 = t42 ^ 2;
t49 = t44 ^ 2;
t53 = pkin(11) * t22 + qJD(2) * pkin(16);
t54 = t34 * t53;
t55 = qJD(1) * pkin(16);
t56 = t32 * t55;
t57 = -t54 + t56;
t64 = t31 * t53 + t39 * t55;
t72 = t64 ^ 2;
t73 = t57 ^ 2;
t75 = cos(qJ(4));
t77 = sin(qJ(4));
t79 = t75 * t36 + t77 * t42;
t80 = t79 ^ 2;
t84 = -t77 * t36 + t75 * t42;
t86 = -t22 + qJD(3) + qJD(4);
t88 = t84 ^ 2;
t91 = t86 ^ 2;
t93 = t77 * t64;
t95 = pkin(18) * t44 - t54 + t56;
t96 = t75 * t95;
t97 = -t93 + t96;
t99 = t19 * pkin(11);
t100 = t42 * pkin(18);
t101 = -t99 - t100;
t107 = t75 * t64 + t77 * t95;
t113 = t107 ^ 2;
t114 = t97 ^ 2;
t115 = t101 ^ 2;
t117 = cos(qJ(5));
t119 = sin(qJ(5));
t121 = t117 * t79 + t119 * t84;
t122 = t121 ^ 2;
t126 = t117 * t84 - t119 * t79;
t128 = -t22 + qJD(3) + qJD(4) + qJD(5);
t130 = t126 ^ 2;
t133 = t128 ^ 2;
t135 = t84 * pkin(6);
t136 = -t99 - t100 - t135;
t138 = t119 * t107;
t140 = pkin(6) * t86 - t93 + t96;
t141 = t117 * t140;
t142 = -t138 + t141;
t148 = t117 * t107 + t119 * t140;
t154 = t148 ^ 2;
t155 = t142 ^ 2;
t156 = t136 ^ 2;
t158 = sin(qJ(6));
t160 = cos(qJ(6));
t162 = -t158 * t121 + t160 * t126;
t163 = t162 ^ 2;
t165 = t160 * t121;
t166 = t158 * t126;
t167 = -t165 - t166;
t169 = -t22 + qJD(3) + qJD(4) + qJD(5) + qJD(6);
t171 = t167 ^ 2;
t174 = t169 ^ 2;
t176 = t126 * pkin(7);
t177 = -t99 - t100 - t135 - t176;
t181 = pkin(7) * t128 - t138 + t141;
t183 = -t160 * t148 - t158 * t181;
t186 = t158 * t148;
t187 = t160 * t181;
t188 = -t186 + t187;
t195 = t188 ^ 2;
t196 = t183 ^ 2;
t197 = t177 ^ 2;
t199 = cos(qJ(7));
t201 = sin(qJ(7));
t203 = t199 * t162 + t201 * t169;
t204 = t203 ^ 2;
t208 = -t201 * t162 + t199 * t169;
t210 = t165 + t166 + qJD(7);
t212 = t208 ^ 2;
t215 = t210 ^ 2;
t219 = pkin(10) * t169 - t186 + t187;
t222 = -pkin(10) * t162 - t100 - t135 - t176 - t99;
t224 = t199 * t222 - t201 * t219;
t230 = t199 * t219 + t201 * t222;
t236 = t230 ^ 2;
t237 = t224 ^ 2;
t239 = sin(pkin(3));
t240 = t239 * t3;
t242 = cos(pkin(3));
t244 = qJD(1) * t240 + qJD(2) * t242;
t245 = t244 ^ 2;
t247 = t242 * t3;
t250 = qJD(1) * t247 - qJD(2) * t239;
t254 = t250 ^ 2;
t258 = t242 * t53;
t259 = t240 * t55;
t260 = -t258 - t259;
t268 = -t239 * t53 + t247 * t55;
t277 = t268 ^ 2;
t278 = t260 ^ 2;
t280 = cos(qJ(8));
t282 = sin(qJ(8));
t284 = t280 * t244 + t282 * t250;
t285 = t284 ^ 2;
t289 = -t282 * t244 + t280 * t250;
t291 = -t22 + qJD(8);
t293 = t289 ^ 2;
t296 = t291 ^ 2;
t300 = pkin(17) * t22 - t258 - t259;
t302 = -t282 * t268 + t280 * t300;
t305 = pkin(17) * t250 - t99;
t311 = t280 * t268 + t282 * t300;
t317 = t311 ^ 2;
t318 = t302 ^ 2;
t319 = t305 ^ 2;
t321 = cos(qJ(9));
t323 = sin(qJ(9));
t325 = t321 * t36 + t323 * t42;
t326 = t325 ^ 2;
t330 = t321 * t42 - t323 * t36;
t332 = -t22 + qJD(3) + qJD(9);
t334 = t330 ^ 2;
t337 = t332 ^ 2;
t339 = t42 * pkin(19);
t340 = -t99 - t339;
t342 = t323 * t64;
t344 = pkin(19) * t44 - t54 + t56;
t345 = t321 * t344;
t346 = -t342 + t345;
t352 = t321 * t64 + t323 * t344;
t358 = t352 ^ 2;
t359 = t346 ^ 2;
t360 = t340 ^ 2;
t362 = cos(qJ(10));
t364 = sin(qJ(10));
t366 = -t362 * t325 - t364 * t330;
t367 = t366 ^ 2;
t371 = t364 * t325 - t362 * t330;
t373 = -t22 + qJD(3) + qJD(9) + qJD(10);
t375 = t371 ^ 2;
t378 = t373 ^ 2;
t381 = -pkin(14) * t330 - t339 - t99;
t385 = pkin(14) * t332 - t342 + t345;
t387 = t364 * t352 - t362 * t385;
t393 = -t362 * t352 - t364 * t385;
t399 = t393 ^ 2;
t400 = t387 ^ 2;
t401 = t381 ^ 2;
t403 = sin(qJ(11));
t405 = cos(qJ(11));
t407 = t403 * t79 - t405 * t84;
t408 = t407 ^ 2;
t412 = t403 * t84 + t405 * t79;
t414 = -t22 + qJD(3) + qJD(4) + qJD(11);
t416 = t412 ^ 2;
t419 = t414 ^ 2;
t420 = t419 / 0.2e1;
t424 = t405 * t107 + t403 * t140;
t430 = t403 * t107 - t405 * t140;
t436 = t430 ^ 2;
t437 = t424 ^ 2;
t439 = sin(pkin(1));
t441 = cos(pkin(1));
t443 = t439 * t407 - t441 * t412;
t444 = t443 ^ 2;
t448 = t441 * t407 + t439 * t412;
t451 = t448 ^ 2;
t455 = t441 * t430;
t456 = t439 * t424;
t457 = t455 + t456;
t463 = -t441 * t424 + t439 * t430;
t469 = t463 ^ 2;
t470 = t457 ^ 2;
t472 = sin(qJ(12));
t474 = cos(qJ(12));
t476 = t472 * t443 - t474 * t448;
t477 = t476 ^ 2;
t478 = t477 / 0.2e1;
t481 = t474 * t443 + t472 * t448;
t483 = -t22 + qJD(3) + qJD(4) + qJD(11) + qJD(12);
t484 = t483 * t476;
t485 = t481 ^ 2;
t486 = t485 / 0.2e1;
t488 = t483 ^ 2;
t489 = t488 / 0.2e1;
t490 = t448 * pkin(9);
t491 = -t99 - t100 - t135 - t490;
t493 = t474 * t463;
t495 = pkin(9) * t414 + t455 + t456;
t496 = t472 * t495;
t497 = t493 + t496;
t501 = t472 * t463;
t502 = t474 * t495;
t503 = t501 - t502;
t509 = t503 ^ 2;
t510 = t497 ^ 2;
t511 = t491 ^ 2;
t515 = -t493 - t496 + qJD(13);
t518 = -qJ(13) * t476 - t100 - t135 - t490 - t99;
t523 = qJ(13) * t483 + t501 - t502;
t529 = t523 ^ 2;
t530 = t518 ^ 2;
t531 = t515 ^ 2;
unknown(1,1) = 0;
unknown(1,2) = 0;
unknown(1,3) = 0;
unknown(1,4) = 0;
unknown(1,5) = 0;
unknown(1,6) = (t1 / 0.2e1);
unknown(1,7) = 0;
unknown(1,8) = 0;
unknown(1,9) = 0;
unknown(1,10) = 0;
unknown(1,11) = (t5 / 0.2e1);
unknown(1,12) = -(t7 * t1 * t3);
unknown(1,13) = -(qJD(2) * t3 * qJD(1));
unknown(1,14) = t14;
unknown(1,15) = (qJD(2) * t7 * qJD(1));
unknown(1,16) = (t17 / 0.2e1);
unknown(1,17) = (t19 * t20);
unknown(1,18) = -(t22 * t20);
unknown(1,19) = (pkin(11) * t13 + pkin(11) * t5);
unknown(1,20) = (t13 * t27 / 0.2e1 + t29 / 0.2e1);
unknown(1,21) = (t37 / 0.2e1);
unknown(1,22) = (t36 * t42);
unknown(1,23) = (t44 * t36);
unknown(1,24) = (t46 / 0.2e1);
unknown(1,25) = (t44 * t42);
unknown(1,26) = (t49 / 0.2e1);
unknown(1,27) = (pkin(11) * t19 * t42 + t57 * t44);
unknown(1,28) = (-pkin(11) * t19 * t36 - t64 * t44);
unknown(1,29) = (-t57 * t36 + t64 * t42);
unknown(1,30) = (t72 / 0.2e1 + t73 / 0.2e1 + t29 / 0.2e1);
unknown(1,31) = (t80 / 0.2e1);
unknown(1,32) = (t79 * t84);
unknown(1,33) = (t79 * t86);
unknown(1,34) = (t88 / 0.2e1);
unknown(1,35) = (t86 * t84);
unknown(1,36) = (t91 / 0.2e1);
unknown(1,37) = (-t101 * t84 + t97 * t86);
unknown(1,38) = (t101 * t79 - t107 * t86);
unknown(1,39) = (t107 * t84 - t97 * t79);
unknown(1,40) = (t113 / 0.2e1 + t114 / 0.2e1 + t115 / 0.2e1);
unknown(1,41) = (t122 / 0.2e1);
unknown(1,42) = (t126 * t121);
unknown(1,43) = (t128 * t121);
unknown(1,44) = (t130 / 0.2e1);
unknown(1,45) = (t128 * t126);
unknown(1,46) = (t133 / 0.2e1);
unknown(1,47) = (-t136 * t126 + t142 * t128);
unknown(1,48) = (t136 * t121 - t148 * t128);
unknown(1,49) = (-t142 * t121 + t148 * t126);
unknown(1,50) = (t154 / 0.2e1 + t155 / 0.2e1 + t156 / 0.2e1);
unknown(1,51) = (t163 / 0.2e1);
unknown(1,52) = (t162 * t167);
unknown(1,53) = (t162 * t169);
unknown(1,54) = (t171 / 0.2e1);
unknown(1,55) = (t169 * t167);
unknown(1,56) = (t174 / 0.2e1);
unknown(1,57) = (-t177 * t167 + t183 * t169);
unknown(1,58) = (t177 * t162 - t188 * t169);
unknown(1,59) = (-t183 * t162 + t188 * t167);
unknown(1,60) = (t195 / 0.2e1 + t196 / 0.2e1 + t197 / 0.2e1);
unknown(1,61) = (t204 / 0.2e1);
unknown(1,62) = (t203 * t208);
unknown(1,63) = (t203 * t210);
unknown(1,64) = (t212 / 0.2e1);
unknown(1,65) = (t210 * t208);
unknown(1,66) = (t215 / 0.2e1);
unknown(1,67) = (t183 * t208 + t224 * t210);
unknown(1,68) = (-t183 * t203 - t230 * t210);
unknown(1,69) = (-t224 * t203 + t230 * t208);
unknown(1,70) = (t236 / 0.2e1 + t237 / 0.2e1 + t196 / 0.2e1);
unknown(1,71) = (t245 / 0.2e1);
unknown(1,72) = (t244 * t250);
unknown(1,73) = -(t244 * t7 * qJD(1));
unknown(1,74) = (t254 / 0.2e1);
unknown(1,75) = -(t250 * t7 * qJD(1));
unknown(1,76) = t14;
unknown(1,77) = (pkin(11) * t19 * t250 - qJD(1) * t260 * t7);
unknown(1,78) = (-pkin(11) * t19 * t244 + qJD(1) * t268 * t7);
unknown(1,79) = (-t260 * t244 + t268 * t250);
unknown(1,80) = (t277 / 0.2e1 + t278 / 0.2e1 + t29 / 0.2e1);
unknown(1,81) = (t285 / 0.2e1);
unknown(1,82) = (t289 * t284);
unknown(1,83) = (t291 * t284);
unknown(1,84) = (t293 / 0.2e1);
unknown(1,85) = (t291 * t289);
unknown(1,86) = (t296 / 0.2e1);
unknown(1,87) = (-t305 * t289 + t302 * t291);
unknown(1,88) = (t305 * t284 - t311 * t291);
unknown(1,89) = (-t302 * t284 + t311 * t289);
unknown(1,90) = (t317 / 0.2e1 + t318 / 0.2e1 + t319 / 0.2e1);
unknown(1,91) = (t326 / 0.2e1);
unknown(1,92) = (t330 * t325);
unknown(1,93) = (t332 * t325);
unknown(1,94) = (t334 / 0.2e1);
unknown(1,95) = (t330 * t332);
unknown(1,96) = (t337 / 0.2e1);
unknown(1,97) = (-t340 * t330 + t346 * t332);
unknown(1,98) = (t340 * t325 - t352 * t332);
unknown(1,99) = (-t346 * t325 + t352 * t330);
unknown(1,100) = (t358 / 0.2e1 + t359 / 0.2e1 + t360 / 0.2e1);
unknown(1,101) = (t367 / 0.2e1);
unknown(1,102) = (t371 * t366);
unknown(1,103) = (t373 * t366);
unknown(1,104) = (t375 / 0.2e1);
unknown(1,105) = (t373 * t371);
unknown(1,106) = (t378 / 0.2e1);
unknown(1,107) = (-t381 * t371 + t387 * t373);
unknown(1,108) = (t381 * t366 - t393 * t373);
unknown(1,109) = (-t387 * t366 + t393 * t371);
unknown(1,110) = (t399 / 0.2e1 + t400 / 0.2e1 + t401 / 0.2e1);
unknown(1,111) = (t408 / 0.2e1);
unknown(1,112) = (t407 * t412);
unknown(1,113) = (t407 * t414);
unknown(1,114) = (t416 / 0.2e1);
unknown(1,115) = (t414 * t412);
unknown(1,116) = t420;
unknown(1,117) = (-t136 * t412 + t424 * t414);
unknown(1,118) = (t136 * t407 - t430 * t414);
unknown(1,119) = (-t424 * t407 + t430 * t412);
unknown(1,120) = (t436 / 0.2e1 + t437 / 0.2e1 + t156 / 0.2e1);
unknown(1,121) = (t444 / 0.2e1);
unknown(1,122) = (t448 * t443);
unknown(1,123) = (t414 * t443);
unknown(1,124) = (t451 / 0.2e1);
unknown(1,125) = (t414 * t448);
unknown(1,126) = t420;
unknown(1,127) = (-t136 * t448 + t457 * t414);
unknown(1,128) = (t136 * t443 - t463 * t414);
unknown(1,129) = (-t457 * t443 + t463 * t448);
unknown(1,130) = (t469 / 0.2e1 + t470 / 0.2e1 + t156 / 0.2e1);
unknown(1,131) = t478;
unknown(1,132) = (t481 * t476);
unknown(1,133) = t484;
unknown(1,134) = t486;
unknown(1,135) = (t483 * t481);
unknown(1,136) = t489;
unknown(1,137) = (-t491 * t481 + t497 * t483);
unknown(1,138) = (t491 * t476 - t503 * t483);
unknown(1,139) = (-t497 * t476 + t503 * t481);
unknown(1,140) = (t509 / 0.2e1 + t510 / 0.2e1 + t511 / 0.2e1);
unknown(1,141) = t478;
unknown(1,142) = t484;
unknown(1,143) = -(t481 * t476);
unknown(1,144) = t489;
unknown(1,145) = -(t483 * t481);
unknown(1,146) = t486;
unknown(1,147) = (-t518 * t481 - t515 * t483);
unknown(1,148) = (t515 * t476 + t523 * t481);
unknown(1,149) = (-t518 * t476 + t523 * t483);
unknown(1,150) = (t529 / 0.2e1 + t530 / 0.2e1 + t531 / 0.2e1);
T_reg = unknown;
