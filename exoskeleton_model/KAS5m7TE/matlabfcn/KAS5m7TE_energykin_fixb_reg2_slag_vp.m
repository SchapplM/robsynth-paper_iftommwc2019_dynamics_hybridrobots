% Calculate inertial parameters regressor of fixed base kinetic energy for
% KAS5m7TE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [24x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[delta10,delta12,delta17,delta18,delta20,delta8,delta9,l1,l11,l12,l13,l14,l15,l17,l18,l2,l20,l21,l22,l23,l3,l4,l5,l6]';
% 
% Output:
% T_reg [1x(5*10)]
%   inertial parameter regressor of kinetic energy

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-12 08:05
% Revision: 2d0abd6fcc3afe6f578a07ad3d897ec57baa6ba1 (2020-04-13)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_reg = KAS5m7TE_energykin_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(24,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'KAS5m7TE_energykin_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'KAS5m7TE_energykin_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [24 1]), ...
  'KAS5m7TE_energykin_fixb_reg2_slag_vp: pkin has to be [24x1] (double)');

%% Symbolic Calculation
% From energy_kinetic_fixb_regressor_matlab.m
% OptimizationMode: 1
% StartTime: 2020-05-06 10:16:45
% EndTime: 2020-05-06 10:39:44
% DurationCPUTime: 1374.28s
% Computational Cost: add. (95659035->352), mult. (126526444->726), div. (1735347->26), fcn. (49784949->26), ass. (0->511)
unknown=NaN(1,150);
t1 = qJD(1) ^ 2;
t3 = cos(qJ(2));
t4 = t3 ^ 2;
t5 = t4 * t1;
t8 = sin(qJ(2));
t10 = t3 * qJD(1);
t12 = t8 ^ 2;
t13 = t12 * t1;
t14 = t13 / 0.2e1;
t15 = t8 * qJD(1);
t17 = qJD(2) ^ 2;
t19 = pkin(16) * qJD(2);
t25 = pkin(16) ^ 2;
t27 = t5 * t25;
t29 = cos(qJ(3));
t30 = -pkin(23) + pkin(24);
t31 = t29 * t30;
t32 = pkin(3) + qJ(3);
t33 = cos(t32);
t34 = t33 * pkin(12);
t35 = -pkin(9) + t31 + t34;
t36 = pkin(11) ^ 2;
t37 = pkin(19) ^ 2;
t38 = t33 ^ 2;
t39 = pkin(12) ^ 2;
t41 = sin(t32);
t42 = t41 ^ 2;
t44 = -pkin(9) + t31;
t45 = t44 ^ 2;
t46 = sin(qJ(3));
t47 = t46 ^ 2;
t48 = t30 ^ 2;
t52 = t46 * t30;
t53 = t41 * pkin(12);
t54 = -t52 + t53;
t57 = 0.2e1 * t35 * t33 * pkin(12) + 0.2e1 * t54 * t41 * pkin(12) - t38 * t39 - t42 * t39 + t47 * t48 + t36 - t37 + t45;
t61 = 0.4e1 * t35 ^ 2 + 0.4e1 * t54 ^ 2;
t63 = t57 ^ 2;
t65 = sqrt(t36 * t61 - t63);
t67 = 0.2e1 * t35 * t57 - 0.2e1 * t54 * t65;
t68 = 0.1e1 / t61;
t70 = t67 * t68 + pkin(9) - t31 - t34;
t74 = 0.2e1 * t35 * t65 + 0.2e1 * t57 * t54;
t76 = t74 * t68 + t52 - t53;
t78 = t29 * t70 - t46 * t76;
t79 = 0.1e1 / pkin(19);
t80 = t78 * t79;
t81 = cos(pkin(7));
t82 = t81 * pkin(18);
t83 = t80 * t82;
t86 = t29 * t76 + t46 * t70;
t87 = t86 * t79;
t88 = sin(pkin(7));
t89 = t88 * pkin(18);
t90 = t87 * t89;
t91 = -pkin(24) - t83 + t90;
t92 = pkin(17) ^ 2;
t93 = pkin(22) ^ 2;
t94 = t83 - t90;
t95 = t94 ^ 2;
t96 = t87 * t82;
t97 = t80 * t89;
t98 = t96 + t97;
t99 = t98 ^ 2;
t100 = pkin(24) ^ 2;
t103 = -0.2e1 * t91 * t94 + 0.2e1 * t98 ^ 2 + t100 + t92 - t93 - t95 - t99;
t107 = 0.4e1 * t91 ^ 2 + 0.4e1 * t98 ^ 2;
t109 = t103 ^ 2;
t111 = sqrt(t92 * t107 - t109);
t113 = 0.2e1 * t91 * t103 + 0.2e1 * t98 * t111;
t114 = 0.1e1 / t107;
t116 = -t113 * t114 - pkin(24) - t83 + t90;
t117 = 0.1e1 / pkin(22);
t118 = t116 * t117;
t119 = sin(pkin(6));
t123 = -0.2e1 * t103 * t98 + 0.2e1 * t91 * t111;
t125 = -t123 * t114 - t96 - t97;
t126 = t125 * t117;
t127 = cos(pkin(6));
t129 = -t118 * t119 + t126 * t127;
t130 = t129 * t3;
t134 = t118 * t127 + t126 * t119;
t136 = -t130 * qJD(1) + t134 * qJD(2);
t137 = t136 ^ 2;
t142 = t134 * t3 * qJD(1) + t129 * qJD(2);
t144 = qJD(3) * t29;
t146 = qJD(3) * t46;
t147 = t146 * t30;
t149 = qJD(3) * t41 * pkin(12);
t150 = -t147 - t149;
t162 = t144 * t30;
t164 = qJD(3) * t33 * pkin(12);
t165 = -t162 + t164;
t170 = 0.2e1 * t150 * t33 * pkin(12) + 0.2e1 * t165 * t41 * pkin(12) + 0.2e1 * t54 * qJD(3) * t34 - 0.2e1 * t35 * qJD(3) * t53 - 0.2e1 * t44 * qJD(3) * t52 + 0.2e1 * t46 * t48 * t144;
t173 = 0.1e1 / t65;
t177 = 0.4e1 * t35 * t150 + 0.4e1 * t54 * t165;
t181 = -0.2e1 * t57 * t170 + 0.2e1 * t36 * t177;
t186 = t61 ^ 2;
t187 = 0.1e1 / t186;
t190 = t147 + t149 + (-t54 * t173 * t181 + 0.2e1 * t150 * t57 - 0.2e1 * t165 * t65 + 0.2e1 * t35 * t170) * t68 - 0.2e1 * t67 * t187 * t177;
t203 = t162 - t164 + (t35 * t173 * t181 + 0.2e1 * t150 * t65 + 0.2e1 * t57 * t165 + 0.2e1 * t170 * t54) * t68 - 0.2e1 * t74 * t187 * t177;
t205 = t144 * t70 - t146 * t76 + t46 * t190 + t29 * t203;
t206 = t205 * t79;
t207 = t206 * t82;
t212 = -t144 * t76 - t146 * t70 + t29 * t190 - t46 * t203;
t213 = t212 * t79;
t214 = t213 * t89;
t215 = t213 * t82;
t216 = t206 * t89;
t217 = t215 - t216;
t220 = t207 + t214;
t226 = -0.2e1 * t91 * t217 + 0.2e1 * t98 * t220;
t230 = 0.1e1 / t111;
t234 = -0.4e1 * t91 * t217 + 0.4e1 * t98 * t220;
t238 = -0.2e1 * t103 * t226 + 0.2e1 * t92 * t234;
t243 = t107 ^ 2;
t244 = 0.1e1 / t243;
t247 = -t207 - t214 - (t91 * t230 * t238 - 0.2e1 * t103 * t220 - 0.2e1 * t217 * t111 - 0.2e1 * t226 * t98) * t114 + 0.2e1 * t123 * t244 * t234;
t250 = t125 ^ 2;
t251 = t116 ^ 2;
t252 = 0.1e1 / t251;
t255 = 0.1e1 / (t250 * t252 + 0.1e1);
t256 = -t247 / t116 * t255;
t267 = t215 - t216 + (t98 * t230 * t238 - 0.2e1 * t217 * t103 + 0.2e1 * t220 * t111 + 0.2e1 * t91 * t226) * t114 - 0.2e1 * t113 * t244 * t234;
t270 = t267 * t125 * t252 * t255;
t271 = -t15 + t256 - t270;
t273 = t142 ^ 2;
t276 = t271 ^ 2;
t280 = t15 * pkin(16) + qJD(2) * pkin(21);
t281 = -t134 * t280;
t282 = qJD(1) * pkin(21);
t283 = t130 * t282;
t284 = t281 + t283;
t292 = t134 * t3 * t282 + t129 * t280;
t300 = t292 ^ 2;
t301 = t284 ^ 2;
t305 = t29 * t136 + t46 * t142;
t306 = t305 ^ 2;
t310 = -t46 * t136 + t29 * t142;
t312 = -t15 + t256 - t270 + qJD(3);
t314 = t310 ^ 2;
t317 = t312 ^ 2;
t319 = t10 * pkin(16);
t320 = t142 * pkin(23);
t321 = -t319 - t320;
t323 = t46 * t292;
t325 = t271 * pkin(23) + t281 + t283;
t326 = t29 * t325;
t327 = -t323 + t326;
t333 = t29 * t292 + t46 * t325;
t339 = t333 ^ 2;
t340 = t327 ^ 2;
t341 = t321 ^ 2;
t343 = cos(qJ(4));
t345 = sin(qJ(4));
t347 = t343 * t305 + t345 * t310;
t348 = t347 ^ 2;
t352 = -t345 * t305 + t343 * t310;
t354 = -t15 + t256 - t270 + qJD(3) + qJD(4);
t356 = t352 ^ 2;
t359 = t354 ^ 2;
t361 = t345 * t333;
t363 = t312 * pkin(9) - t323 + t326;
t364 = t343 * t363;
t365 = -t361 + t364;
t367 = t310 * pkin(9);
t368 = -t319 - t320 - t367;
t374 = t343 * t333 + t345 * t363;
t380 = t374 ^ 2;
t381 = t365 ^ 2;
t382 = t368 ^ 2;
t384 = qJ(4) - qJ(3) + pkin(4);
t385 = sin(t384);
t387 = cos(t384);
t389 = -t385 * t347 + t387 * t352;
t390 = t389 ^ 2;
t392 = t387 * t347;
t393 = t385 * t352;
t394 = -t392 - t393;
t397 = -t15 + t256 - t270 + 0.2e1 * qJD(4);
t399 = t394 ^ 2;
t402 = t397 ^ 2;
t406 = t354 * pkin(10) - t361 + t364;
t408 = -t387 * t374 - t385 * t406;
t410 = t352 * pkin(10);
t411 = -t319 - t320 - t367 - t410;
t414 = t385 * t374;
t415 = t387 * t406;
t416 = -t414 + t415;
t423 = t416 ^ 2;
t424 = t408 ^ 2;
t425 = t411 ^ 2;
t427 = cos(qJ(5));
t429 = sin(qJ(5));
t431 = t427 * t389 + t429 * t397;
t432 = t431 ^ 2;
t436 = -t429 * t389 + t427 * t397;
t438 = t392 + t393 + qJD(5);
t440 = t436 ^ 2;
t443 = t438 ^ 2;
t447 = t397 * pkin(13) - t414 + t415;
t450 = -t389 * pkin(13) - t319 - t320 - t367 - t410;
t452 = t427 * t450 - t429 * t447;
t458 = t427 * t447 + t429 * t450;
t464 = t458 ^ 2;
t465 = t452 ^ 2;
t467 = t119 * t3;
t470 = t467 * qJD(1) + t127 * qJD(2);
t471 = t470 ^ 2;
t473 = t127 * t3;
t476 = t473 * qJD(1) - t119 * qJD(2);
t480 = t476 ^ 2;
t483 = t127 * t280;
t484 = t467 * t282;
t485 = -t483 - t484;
t493 = -t119 * t280 + t473 * t282;
t502 = t493 ^ 2;
t503 = t485 ^ 2;
t507 = t134 * t119 + t129 * t127;
t509 = t507 * pkin(22) + t96 + t97;
t511 = 0.1e1 / pkin(17);
t515 = t129 * t119 - t134 * t127;
t517 = -t515 * pkin(22) + pkin(24) + t83 - t90;
t520 = t507 * t509 * t511 - t515 * t517 * t511;
t526 = -t507 * t517 * t511 - t509 * t511 * t515;
t528 = t520 * t470 + t526 * t476;
t529 = t528 ^ 2;
t533 = -t526 * t470 + t520 * t476;
t535 = t247 * t117;
t537 = -t267 * t117;
t539 = t535 * t119 + t537 * t127;
t543 = -t537 * t119 + t535 * t127;
t550 = t517 ^ 2;
t551 = t509 ^ 2;
t552 = 0.1e1 / t551;
t555 = 0.1e1 / (t550 * t552 + 0.1e1);
t565 = -t15 + t256 - t270 - (-(t543 * t119 - t539 * t127) * pkin(22) + t215 - t216) / t509 * t555 + ((t539 * t119 + t543 * t127) * pkin(22) + t207 + t214) * t517 * t552 * t555;
t567 = t533 ^ 2;
t570 = t565 ^ 2;
t574 = t15 * pkin(22) - t483 - t484;
t576 = -t526 * t493 + t520 * t574;
t579 = t476 * pkin(22) - t319;
t584 = t520 * t493 + t526 * t574;
t591 = t584 ^ 2;
t592 = t576 ^ 2;
t593 = t579 ^ 2;
t597 = t80 * t136 + t87 * t142;
t598 = t597 ^ 2;
t602 = -t87 * t136 + t80 * t142;
t606 = t86 ^ 2;
t607 = t78 ^ 2;
t608 = 0.1e1 / t607;
t611 = 0.1e1 / (t606 * t608 + 0.1e1);
t616 = -t15 + t256 - t270 + t205 / t78 * t611 - t212 * t86 * t608 * t611;
t618 = t602 ^ 2;
t621 = t616 ^ 2;
t623 = t142 * pkin(24);
t624 = -t319 - t623;
t626 = t87 * t292;
t628 = t271 * pkin(24) + t281 + t283;
t629 = t80 * t628;
t630 = -t626 + t629;
t636 = t80 * t292 + t87 * t628;
t642 = t636 ^ 2;
t643 = t630 ^ 2;
t644 = t624 ^ 2;
t650 = t29 * t78 * t79 + t46 * t86 * t79;
t652 = t650 * pkin(19) - pkin(9) + t31 + t34;
t654 = 0.1e1 / pkin(11);
t660 = -t29 * t86 * t79 + t46 * t78 * t79;
t662 = t660 * pkin(19) + t52 - t53;
t665 = -t650 * t652 * t654 - t660 * t662 * t654;
t671 = t650 * t662 * t654 - t652 * t654 * t660;
t673 = t665 * t597 + t671 * t602;
t674 = t673 ^ 2;
t678 = -t671 * t597 + t665 * t602;
t691 = t662 ^ 2;
t692 = t652 ^ 2;
t693 = 0.1e1 / t692;
t696 = 0.1e1 / (t691 * t693 + 0.1e1);
t710 = -t15 + t256 - t270 - ((-t29 * t205 * t79 + t46 * t212 * t79 + t144 * t80 + t146 * t87) * pkin(19) + t162 - t164) / t652 * t696 + ((t46 * t205 * t79 + t29 * t212 * t79 + t144 * t87 - t146 * t80) * pkin(19) - t147 - t149) * t662 * t693 * t696 + qJD(3);
t712 = t678 ^ 2;
t715 = t710 ^ 2;
t719 = t616 * pkin(19) - t626 + t629;
t721 = -t671 * t636 + t665 * t719;
t724 = -t602 * pkin(19) - t319 - t623;
t729 = t665 * t636 + t671 * t719;
t736 = t729 ^ 2;
t737 = t721 ^ 2;
t738 = t724 ^ 2;
t742 = -t29 * t310 + t46 * t305;
t743 = t742 ^ 2;
t747 = t29 * t305 + t46 * t310;
t750 = -t15 + t256 - t270 + 0.2e1 * qJD(3);
t752 = t747 ^ 2;
t755 = t750 ^ 2;
t756 = t755 / 0.2e1;
t760 = t29 * t333 + t46 * t363;
t766 = -t29 * t363 + t46 * t333;
t772 = t766 ^ 2;
t773 = t760 ^ 2;
t775 = sin(pkin(3));
t777 = cos(pkin(3));
t779 = t775 * t742 - t777 * t747;
t780 = t779 ^ 2;
t784 = t777 * t742 + t775 * t747;
t787 = t784 ^ 2;
t791 = t777 * t766;
t792 = t775 * t760;
t793 = t791 + t792;
t799 = -t777 * t760 + t775 * t766;
t805 = t799 ^ 2;
t806 = t793 ^ 2;
t809 = pkin(3) + qJ(3) - qJ(4);
t810 = sin(t809);
t813 = t810 * pkin(12) - t387 * pkin(14) + t385 * pkin(15);
t816 = cos(t809);
t818 = -t816 * pkin(12) - t385 * pkin(14) - t387 * pkin(15) - pkin(10);
t819 = t818 ^ 2;
t820 = t813 ^ 2;
t822 = sqrt(t819 + t820);
t823 = 0.1e1 / t822;
t824 = t813 * t823;
t826 = t818 * t823;
t828 = t826 * t810 + t824 * t816;
t832 = -t824 * t810 + t826 * t816;
t834 = t828 * t779 + t832 * t784;
t835 = t834 ^ 2;
t836 = t835 / 0.2e1;
t839 = -t832 * t779 + t828 * t784;
t841 = qJD(4) - qJD(3);
t842 = t841 * t387;
t846 = t841 * t385;
t848 = -t841 * t816 * pkin(12) + t846 * pkin(14) + t842 * pkin(15);
t851 = 0.1e1 / t819;
t854 = 0.1e1 / (t820 * t851 + 0.1e1);
t860 = -t841 * t810 * pkin(12) - t842 * pkin(14) + t846 * pkin(15);
t864 = -t15 + t256 - t270 + qJD(3) - t848 / t818 * t854 + t860 * t813 * t851 * t854 + qJD(4);
t865 = t864 * t834;
t866 = t839 ^ 2;
t867 = t866 / 0.2e1;
t869 = t864 ^ 2;
t870 = t869 / 0.2e1;
t871 = t784 * pkin(12);
t872 = -t319 - t320 - t367 - t871;
t874 = -t832 * t799;
t876 = t750 * pkin(12) + t791 + t792;
t877 = t828 * t876;
t878 = t874 + t877;
t882 = t828 * t799;
t883 = t832 * t876;
t884 = t882 + t883;
t890 = t884 ^ 2;
t891 = t878 ^ 2;
t892 = t872 ^ 2;
t901 = -t874 - t877 + t823 * (t813 * t848 + t818 * t860);
t904 = -t834 * t822 - t319 - t320 - t367 - t871;
t909 = t864 * t822 + t882 + t883;
t915 = t909 ^ 2;
t916 = t904 ^ 2;
t917 = t901 ^ 2;
unknown(1,1) = 0;
unknown(1,2) = 0;
unknown(1,3) = 0;
unknown(1,4) = 0;
unknown(1,5) = 0;
unknown(1,6) = (t1 / 0.2e1);
unknown(1,7) = 0;
unknown(1,8) = 0;
unknown(1,9) = 0;
unknown(1,10) = 0;
unknown(1,11) = (t5 / 0.2e1);
unknown(1,12) = -(t3 * t1 * t8);
unknown(1,13) = -(t10 * qJD(2));
unknown(1,14) = t14;
unknown(1,15) = (t15 * qJD(2));
unknown(1,16) = (t17 / 0.2e1);
unknown(1,17) = (t10 * t19);
unknown(1,18) = -(t15 * t19);
unknown(1,19) = (t13 * pkin(16) + t5 * pkin(16));
unknown(1,20) = (t13 * t25 / 0.2e1 + t27 / 0.2e1);
unknown(1,21) = (t137 / 0.2e1);
unknown(1,22) = (t136 * t142);
unknown(1,23) = (t271 * t136);
unknown(1,24) = (t273 / 0.2e1);
unknown(1,25) = (t271 * t142);
unknown(1,26) = (t276 / 0.2e1);
unknown(1,27) = (t10 * pkin(16) * t142 + t284 * t271);
unknown(1,28) = (-t10 * pkin(16) * t136 - t292 * t271);
unknown(1,29) = (-t284 * t136 + t292 * t142);
unknown(1,30) = (t300 / 0.2e1 + t301 / 0.2e1 + t27 / 0.2e1);
unknown(1,31) = (t306 / 0.2e1);
unknown(1,32) = (t310 * t305);
unknown(1,33) = (t305 * t312);
unknown(1,34) = (t314 / 0.2e1);
unknown(1,35) = (t310 * t312);
unknown(1,36) = (t317 / 0.2e1);
unknown(1,37) = (-t321 * t310 + t327 * t312);
unknown(1,38) = (t321 * t305 - t333 * t312);
unknown(1,39) = (-t327 * t305 + t333 * t310);
unknown(1,40) = (t339 / 0.2e1 + t340 / 0.2e1 + t341 / 0.2e1);
unknown(1,41) = (t348 / 0.2e1);
unknown(1,42) = (t347 * t352);
unknown(1,43) = (t347 * t354);
unknown(1,44) = (t356 / 0.2e1);
unknown(1,45) = (t354 * t352);
unknown(1,46) = (t359 / 0.2e1);
unknown(1,47) = (-t368 * t352 + t365 * t354);
unknown(1,48) = (t368 * t347 - t374 * t354);
unknown(1,49) = (-t365 * t347 + t374 * t352);
unknown(1,50) = (t380 / 0.2e1 + t381 / 0.2e1 + t382 / 0.2e1);
unknown(1,51) = (t390 / 0.2e1);
unknown(1,52) = (t389 * t394);
unknown(1,53) = (t389 * t397);
unknown(1,54) = (t399 / 0.2e1);
unknown(1,55) = (t394 * t397);
unknown(1,56) = (t402 / 0.2e1);
unknown(1,57) = (-t411 * t394 + t408 * t397);
unknown(1,58) = (t411 * t389 - t416 * t397);
unknown(1,59) = (-t408 * t389 + t416 * t394);
unknown(1,60) = (t423 / 0.2e1 + t424 / 0.2e1 + t425 / 0.2e1);
unknown(1,61) = (t432 / 0.2e1);
unknown(1,62) = (t431 * t436);
unknown(1,63) = (t438 * t431);
unknown(1,64) = (t440 / 0.2e1);
unknown(1,65) = (t438 * t436);
unknown(1,66) = (t443 / 0.2e1);
unknown(1,67) = (t408 * t436 + t452 * t438);
unknown(1,68) = (-t408 * t431 - t458 * t438);
unknown(1,69) = (-t452 * t431 + t458 * t436);
unknown(1,70) = (t464 / 0.2e1 + t465 / 0.2e1 + t424 / 0.2e1);
unknown(1,71) = (t471 / 0.2e1);
unknown(1,72) = (t470 * t476);
unknown(1,73) = -(t470 * t8 * qJD(1));
unknown(1,74) = (t480 / 0.2e1);
unknown(1,75) = -(t15 * t476);
unknown(1,76) = t14;
unknown(1,77) = (t10 * pkin(16) * t476 - t485 * t8 * qJD(1));
unknown(1,78) = (-t10 * pkin(16) * t470 + t493 * t8 * qJD(1));
unknown(1,79) = (-t485 * t470 + t493 * t476);
unknown(1,80) = (t502 / 0.2e1 + t503 / 0.2e1 + t27 / 0.2e1);
unknown(1,81) = (t529 / 0.2e1);
unknown(1,82) = (t533 * t528);
unknown(1,83) = (t565 * t528);
unknown(1,84) = (t567 / 0.2e1);
unknown(1,85) = (t565 * t533);
unknown(1,86) = (t570 / 0.2e1);
unknown(1,87) = (-t579 * t533 + t576 * t565);
unknown(1,88) = (t579 * t528 - t584 * t565);
unknown(1,89) = (-t576 * t528 + t584 * t533);
unknown(1,90) = (t591 / 0.2e1 + t592 / 0.2e1 + t593 / 0.2e1);
unknown(1,91) = (t598 / 0.2e1);
unknown(1,92) = (t602 * t597);
unknown(1,93) = (t616 * t597);
unknown(1,94) = (t618 / 0.2e1);
unknown(1,95) = (t616 * t602);
unknown(1,96) = (t621 / 0.2e1);
unknown(1,97) = (-t624 * t602 + t630 * t616);
unknown(1,98) = (t624 * t597 - t636 * t616);
unknown(1,99) = (-t630 * t597 + t636 * t602);
unknown(1,100) = (t642 / 0.2e1 + t643 / 0.2e1 + t644 / 0.2e1);
unknown(1,101) = (t674 / 0.2e1);
unknown(1,102) = (t678 * t673);
unknown(1,103) = (t673 * t710);
unknown(1,104) = (t712 / 0.2e1);
unknown(1,105) = (t678 * t710);
unknown(1,106) = (t715 / 0.2e1);
unknown(1,107) = (-t724 * t678 + t721 * t710);
unknown(1,108) = (t724 * t673 - t729 * t710);
unknown(1,109) = (-t721 * t673 + t729 * t678);
unknown(1,110) = (t736 / 0.2e1 + t737 / 0.2e1 + t738 / 0.2e1);
unknown(1,111) = (t743 / 0.2e1);
unknown(1,112) = (t742 * t747);
unknown(1,113) = (t750 * t742);
unknown(1,114) = (t752 / 0.2e1);
unknown(1,115) = (t750 * t747);
unknown(1,116) = t756;
unknown(1,117) = (-t368 * t747 + t760 * t750);
unknown(1,118) = (t368 * t742 - t766 * t750);
unknown(1,119) = (-t760 * t742 + t766 * t747);
unknown(1,120) = (t772 / 0.2e1 + t773 / 0.2e1 + t382 / 0.2e1);
unknown(1,121) = (t780 / 0.2e1);
unknown(1,122) = (t779 * t784);
unknown(1,123) = (t750 * t779);
unknown(1,124) = (t787 / 0.2e1);
unknown(1,125) = (t750 * t784);
unknown(1,126) = t756;
unknown(1,127) = (-t368 * t784 + t793 * t750);
unknown(1,128) = (t368 * t779 - t799 * t750);
unknown(1,129) = (-t793 * t779 + t799 * t784);
unknown(1,130) = (t805 / 0.2e1 + t806 / 0.2e1 + t382 / 0.2e1);
unknown(1,131) = t836;
unknown(1,132) = (t834 * t839);
unknown(1,133) = t865;
unknown(1,134) = t867;
unknown(1,135) = (t864 * t839);
unknown(1,136) = t870;
unknown(1,137) = (-t872 * t839 + t878 * t864);
unknown(1,138) = (t872 * t834 - t884 * t864);
unknown(1,139) = (-t878 * t834 + t884 * t839);
unknown(1,140) = (t890 / 0.2e1 + t891 / 0.2e1 + t892 / 0.2e1);
unknown(1,141) = t836;
unknown(1,142) = t865;
unknown(1,143) = -(t834 * t839);
unknown(1,144) = t870;
unknown(1,145) = -(t864 * t839);
unknown(1,146) = t867;
unknown(1,147) = (-t904 * t839 - t901 * t864);
unknown(1,148) = (t901 * t834 + t909 * t839);
unknown(1,149) = (-t904 * t834 + t909 * t864);
unknown(1,150) = (t915 / 0.2e1 + t916 / 0.2e1 + t917 / 0.2e1);
T_reg = unknown;
